<?xml version="1.0" encoding="us-ascii"?>
<feed
xmlns="http://www.w3.org/2005/Atom"
xmlns:thr="http://purl.org/syndication/thread/1.0"><title>[PATCH v2 00/21] cpufreq: introduce a new AMD CPU frequency control mechanism</title><link
rel="alternate"
type="text/html"
href="http://lore.kernel.org/lkml/"/><link
rel="self"
href="http://lore.kernel.org/lkml/20210926090605.3556134-22-ray.huang@amd.com/t.atom"/><id>urn:uuid:41950722-c967-862e-76fd-7381304b2165</id><updated>1970-01-01T00:00:01Z</updated><entry><author><name>Huang Rui</name><email>ray.huang@amd.com</email></author><title>[PATCH v2 00/21] cpufreq: introduce a new AMD CPU frequency control mechanism</title><updated>1970-01-01T00:00:02Z</updated><link
href="http://lore.kernel.org/lkml/20210926090605.3556134-1-ray.huang@amd.com/"/><id>urn:uuid:9f37786f-4a96-95bd-37dc-29186a50f830</id><content
type="xhtml"><div
xmlns="http://www.w3.org/1999/xhtml"><pre
style="white-space:pre-wrap">Hi all,

We would like to introduce a new AMD CPU frequency control mechanism as the
&#34;amd-pstate&#34; driver for modern AMD Zen based CPU series in Linux Kernel.
The new mechanism is based on Collaborative processor performance control
(CPPC) which is finer grain frequency management than legacy ACPI hardware
P-States. Current AMD CPU platforms are using the ACPI P-states driver to
manage CPU frequency and clocks with switching only in 3 P-states. AMD
P-States is to replace the ACPI P-states controls, allows a flexible,
low-latency interface for the Linux kernel to directly communicate the
performance hints to hardware.

&#34;amd-pstate&#34; leverages the Linux kernel governors such as *schedutil*,
*ondemand*, etc. to manage the performance hints which are provided by CPPC
hardware functionality. The first version for amd-pstate is to support one
of the Zen3 processors, and we will support more in future after we verify
the hardware and SBIOS functionalities.

There are two types of hardware implementations for amd-pstate: one is full
MSR support and another is shared memory support. It can use
X86_FEATURE_AMD_CPPC_EXT feature flag to distinguish the different types.

Using the new AMD P-States method + kernel governors (*schedutil*,
*ondemand*, ...) to manage the frequency update is the most appropriate
bridge between AMD Zen based hardware processor and Linux kernel, the
processor is able to ajust to the most efficiency frequency according to
the kernel scheduler loading.

Performance Per Watt (PPW) Caculation:

The PPW caculation is referred by below paper:
<a
href="https://software.intel.com/content/dam/develop/external/us/en/documents/performance-per-what-paper.pdf">https://software.intel.com/content/dam/develop/external/us/en/documents/performance-per-what-paper.pdf</a>

Below formula is referred from below spec to measure the PPW:

(F / t) / P = F * t / (t * E) = F / E,

&#34;F&#34; is the number of frames per second.
&#34;P&#34; is power measurd in watts.
&#34;E&#34; is energy measured in joules.

We use the RAPL interface with &#34;perf&#34; tool to get the energy data of the
package power.

The data comparsions between amd-pstate and acpi-freq module are tested on
AMD Cezanne processor:

1) TBench CPU benchmark:

+---------------------------------------------------------------------+
|                                                                     |
|               TBench (Performance Per Watt)                         |
|                                                    Higher is better |
+-------------------+------------------------+------------------------+
|                   |  Performance Per Watt  |  Performance Per Watt  |
|   Kernel Module   |       (Schedutil)      |       (Ondemand)       |
|                   |  Unit: MB / (s * J)    |  Unit: MB / (s * J)    |
+-------------------+------------------------+------------------------+
|                   |                        |                        |
|    acpi-cpufreq   |         3.022          |        2.969           |
|                   |                        |                        |
+-------------------+------------------------+------------------------+
|                   |                        |                        |
|     amd-pstate    |         3.131          |        3.284           |
|                   |                        |                        |
+-------------------+------------------------+------------------------+

2) Gitsource CPU benchmark:

+---------------------------------------------------------------------+
|                                                                     |
|               Gitsource (Performance Per Watt)                      |
|                                                    Higher is better |
+-------------------+------------------------+------------------------+
|                   |  Performance Per Watt  |  Performance Per Watt  |
|   Kernel Module   |       (Schedutil)      |       (Ondemand)       |
|                   |  Unit: 1 / (s * J)     |  Unit: 1 / (s * J)     |
+-------------------+------------------------+------------------------+
|                   |                        |                        |
|    acpi-cpufreq   |     3.42172E-07        |     2.74508E-07        |
|                   |                        |                        |
+-------------------+------------------------+------------------------+
|                   |                        |                        |
|     amd-pstate    |     4.09141E-07        |     3.47610E-07        |
|                   |                        |                        |
+-------------------+------------------------+------------------------+

3) Speedometer 2.0 CPU benchmark:

+---------------------------------------------------------------------+
|                                                                     |
|               Speedometer 2.0 (Performance Per Watt)                |
|                                                    Higher is better |
+-------------------+------------------------+------------------------+
|                   |  Performance Per Watt  |  Performance Per Watt  |
|   Kernel Module   |       (Schedutil)      |       (Ondemand)       |
|                   |  Unit: 1 / (s * J)     |  Unit: 1 / (s * J)     |
+-------------------+------------------------+------------------------+
|                   |                        |                        |
|    acpi-cpufreq   |      0.116111767       |      0.110321664       |
|                   |                        |                        |
+-------------------+------------------------+------------------------+
|                   |                        |                        |
|     amd-pstate    |      0.115825281       |      0.122024299       |
|                   |                        |                        |
+-------------------+------------------------+------------------------+


According to above average data, we can see this solution has shown better
performance per watt scaling on mobile CPU benchmarks in most of cases.

These patch series depends on a &#34;hotplug capable&#34; CPU fix below (Only few
of CPU parts with &#34;un-hotplug&#34; core will encounter the issue and Mario is
working on the fix):
<a
href="https://lore.kernel.org/linux-pm/20210813161842.222414-1-mario.limonciello@amd.com/">https://lore.kernel.org/linux-pm/20210813161842.222414-1-mario.limonciello@amd.com/</a>

And we can see patch series in below git repo:
V1: <a
href="https://git.kernel.org/pub/scm/linux/kernel/git/rui/linux.git/log/?h=amd-pstate-dev-v1">https://git.kernel.org/pub/scm/linux/kernel/git/rui/linux.git/log/?h=amd-pstate-dev-v1</a>
V2: <a
href="https://git.kernel.org/pub/scm/linux/kernel/git/rui/linux.git/log/?h=amd-pstate-dev-v2">https://git.kernel.org/pub/scm/linux/kernel/git/rui/linux.git/log/?h=amd-pstate-dev-v2</a>

For details introduction, please see the patch 19.

Changes from V1 -&gt; V2:
- cpufreq:
- - Add detailed description in the commit log.
- - Clean up the &#34;extension&#34; postfix in the x86 feature flag.
- - Revise cppc_set_enable helper.
- - Add a fix to check online cpus in cppc_acpi.
- - Use static calls to avoid retpolines.
- - Revise the comment style.
- - Remove amd_pstate_boost_supported() function.
- - Revise the return value in syfs attribute functions.
- cpupower:
- - Refine the commit log for cpupower patches.
- - Expose a function to get the sysfs value from specific table.
- - Move amd-pstate sysfs definitions and functions into amd helper file.
- - Move the boost init function into amd helper file and explain the
  details in the commit log.
- - Remove the amd_pstate_get_data in the lib/cpufreq.c to keep the lib as
  common operations.
- - Move print_speed function into misc helper file.
- - Add amd_pstate_show_perf_and_freq() function in amd helper for
  cpufreq-info print.

Thanks,
Ray

Huang Rui (19):
  x86/cpufreatures: add AMD Collaborative Processor Performance Control
    feature flag
  x86/msr: add AMD CPPC MSR definitions
  cpufreq: amd: introduce a new amd pstate driver to support future
    processors
  cpufreq: amd: add fast switch function for amd-pstate module
  cpufreq: amd: add acpi cppc function as the backend for legacy
    processors
  cpufreq: amd: add trace for amd-pstate module
  cpufreq: amd: add boost mode support for amd-pstate
  cpufreq: amd: add amd-pstate checking support check attribute
  cpufreq: amd: add amd-pstate frequencies attributes
  cpufreq: amd: add amd-pstate performance attributes
  cpupower: add AMD P-state capability flag
  cpupower: add the function to check amd-pstate enabled
  cpupower: initial AMD P-state capability
  cpupower: add the function to get the sysfs value from specific table
  cpupower: add amd-pstate sysfs definition and access helper
  cpupower: enable boost state support for amd-pstate module
  cpupower: move print_speed function into misc helper
  cpupower: print amd-pstate information on cpupower
  Documentation: amd-pstate: add amd-pstate driver introduction

Jinzhou Su (1):
  ACPI: CPPC: add cppc enable register function

Mario Limonciello (1):
  ACPI: CPPC: Check online CPUs for determining _CPC is valid

 Documentation/admin-guide/pm/amd_pstate.rst   | 377 +++++++++
 .../admin-guide/pm/working-state.rst          |   1 +
 arch/x86/include/asm/cpufeatures.h            |   1 +
 arch/x86/include/asm/msr-index.h              |  17 +
 drivers/acpi/cppc_acpi.c                      |  50 +-
 drivers/cpufreq/Kconfig.x86                   |  13 +
 drivers/cpufreq/Makefile                      |   5 +
 drivers/cpufreq/amd-pstate-trace.c            |   2 +
 drivers/cpufreq/amd-pstate-trace.h            |  96 +++
 drivers/cpufreq/amd-pstate.c                  | 724 ++++++++++++++++++
 include/acpi/cppc_acpi.h                      |   5 +
 tools/power/cpupower/lib/cpufreq.c            |  21 +-
 tools/power/cpupower/lib/cpufreq.h            |  12 +
 tools/power/cpupower/utils/cpufreq-info.c     |  68 +-
 tools/power/cpupower/utils/helpers/amd.c      |  82 ++
 tools/power/cpupower/utils/helpers/cpuid.c    |  13 +
 tools/power/cpupower/utils/helpers/helpers.h  |  21 +
 tools/power/cpupower/utils/helpers/misc.c     |  64 ++
 18 files changed, 1514 insertions(+), 58 deletions(-)
 create mode 100644 Documentation/admin-guide/pm/amd_pstate.rst
 create mode 100644 drivers/cpufreq/amd-pstate-trace.c
 create mode 100644 drivers/cpufreq/amd-pstate-trace.h
 create mode 100644 drivers/cpufreq/amd-pstate.c

--
2.25.1

</pre></div></content></entry><entry><author><name>Huang Rui</name><email>ray.huang@amd.com</email></author><title>[PATCH v2 01/21] x86/cpufreatures: add AMD Collaborative Processor Performance Control feature flag</title><updated>1970-01-01T00:00:02Z</updated><link
href="http://lore.kernel.org/lkml/20210926090605.3556134-2-ray.huang@amd.com/"/><id>urn:uuid:0625db3f-46ca-c277-383a-512484cf59bf</id><thr:in-reply-to
ref="urn:uuid:9f37786f-4a96-95bd-37dc-29186a50f830"
href="http://lore.kernel.org/lkml/20210926090605.3556134-1-ray.huang@amd.com/"/><content
type="xhtml"><div
xmlns="http://www.w3.org/1999/xhtml"><pre
style="white-space:pre-wrap">Add Collaborative Processor Performance Control feature flag for AMD
processors.

This feature flag will be used on the following amd-pstate driver. The
amd-pstate driver has two approaches to implement the frequency control
behavior. That depends on the CPU hardware implementation. One is &#34;Full
MSR Support&#34; and another is &#34;Shared Memory Support&#34;. The feature flag
indicates the current processors with &#34;Full MSR Support&#34;.

Signed-off-by: Huang Rui &lt;ray.huang@amd.com&gt;
---
 arch/x86/include/asm/cpufeatures.h | 1 +
 1 file changed, 1 insertion(+)

<span
class="head">diff --git a/arch/x86/include/asm/cpufeatures.h b/arch/x86/include/asm/cpufeatures.h
index d0ce5cfd3ac1..f23dc1abd485 100644
--- a/arch/x86/include/asm/cpufeatures.h
+++ b/arch/x86/include/asm/cpufeatures.h
</span><span
class="hunk">@@ -313,6 +313,7 @@
</span> #define X86_FEATURE_AMD_SSBD		(13*32+24) /* &#34;&#34; Speculative Store Bypass Disable */
 #define X86_FEATURE_VIRT_SSBD		(13*32+25) /* Virtualized Speculative Store Bypass Disable */
 #define X86_FEATURE_AMD_SSB_NO		(13*32+26) /* &#34;&#34; Speculative Store Bypass is fixed in hardware. */
<span
class="add">+#define X86_FEATURE_AMD_CPPC		(13*32+27) /* Collaborative Processor Performance Control */
</span>
 /* Thermal and Power Management Leaf, CPUID level 0x00000006 (EAX), word 14 */
 #define X86_FEATURE_DTHERM		(14*32+ 0) /* Digital Thermal Sensor */
--
2.25.1

</pre></div></content></entry><entry><author><name>Huang Rui</name><email>ray.huang@amd.com</email></author><title>[PATCH v2 02/21] x86/msr: add AMD CPPC MSR definitions</title><updated>1970-01-01T00:00:02Z</updated><link
href="http://lore.kernel.org/lkml/20210926090605.3556134-3-ray.huang@amd.com/"/><id>urn:uuid:ca244f7b-62b7-b833-a3b2-f9a3c2c781f5</id><thr:in-reply-to
ref="urn:uuid:9f37786f-4a96-95bd-37dc-29186a50f830"
href="http://lore.kernel.org/lkml/20210926090605.3556134-1-ray.huang@amd.com/"/><content
type="xhtml"><div
xmlns="http://www.w3.org/1999/xhtml"><pre
style="white-space:pre-wrap">AMD CPPC (Collaborative Processor Performance Control) function uses MSR
registers to manage the performance hints. So add the MSR register macro
here.

Signed-off-by: Huang Rui &lt;ray.huang@amd.com&gt;
---
 arch/x86/include/asm/msr-index.h | 17 +++++++++++++++++
 1 file changed, 17 insertions(+)

<span
class="head">diff --git a/arch/x86/include/asm/msr-index.h b/arch/x86/include/asm/msr-index.h
index a7c413432b33..ce42e15cf303 100644
--- a/arch/x86/include/asm/msr-index.h
+++ b/arch/x86/include/asm/msr-index.h
</span><span
class="hunk">@@ -486,6 +486,23 @@
</span>
 #define MSR_AMD64_VIRT_SPEC_CTRL	0xc001011f

<span
class="add">+/* AMD Collaborative Processor Performance Control MSRs */
+#define MSR_AMD_CPPC_CAP1		0xc00102b0
+#define MSR_AMD_CPPC_ENABLE		0xc00102b1
+#define MSR_AMD_CPPC_CAP2		0xc00102b2
+#define MSR_AMD_CPPC_REQ		0xc00102b3
+#define MSR_AMD_CPPC_STATUS		0xc00102b4
+
+#define CAP1_LOWEST_PERF(x)	(((x) &gt;&gt; 0) &#38; 0xff)
+#define CAP1_LOWNONLIN_PERF(x)	(((x) &gt;&gt; 8) &#38; 0xff)
+#define CAP1_NOMINAL_PERF(x)	(((x) &gt;&gt; 16) &#38; 0xff)
+#define CAP1_HIGHEST_PERF(x)	(((x) &gt;&gt; 24) &#38; 0xff)
+
+#define REQ_MAX_PERF(x)		(((x) &#38; 0xff) &lt;&lt; 0)
+#define REQ_MIN_PERF(x)		(((x) &#38; 0xff) &lt;&lt; 8)
+#define REQ_DES_PERF(x)		(((x) &#38; 0xff) &lt;&lt; 16)
+#define REQ_ENERGY_PERF_PREF(x)	(((x) &#38; 0xff) &lt;&lt; 24)
+
</span> /* Fam 17h MSRs */
 #define MSR_F17H_IRPERF			0xc00000e9

--
2.25.1

</pre></div></content></entry><entry><author><name>Huang Rui</name><email>ray.huang@amd.com</email></author><title>[PATCH v2 03/21] ACPI: CPPC: Check online CPUs for determining _CPC is valid</title><updated>1970-01-01T00:00:02Z</updated><link
href="http://lore.kernel.org/lkml/20210926090605.3556134-4-ray.huang@amd.com/"/><id>urn:uuid:79c942b1-d566-0363-d1bc-ec3f4abf74a2</id><thr:in-reply-to
ref="urn:uuid:9f37786f-4a96-95bd-37dc-29186a50f830"
href="http://lore.kernel.org/lkml/20210926090605.3556134-1-ray.huang@amd.com/"/><content
type="xhtml"><div
xmlns="http://www.w3.org/1999/xhtml"><pre
style="white-space:pre-wrap">From: Mario Limonciello &lt;mario.limonciello@amd.com&gt;

As this is a static check, it should be based upon what is currently
present on the system. This makes probeing more deterministic.

While local APIC flags field (lapic_flags) of cpu core in MADT table is
0, then the cpu core won&#39;t be enabled. In this case, _CPC won&#39;t be found
in this core, and return back to _CPC invalid with walking through
possible cpus (include disable cpus). This is not expected, so switch to
check online CPUs instead.

Reported-by: Jinzhou Su &lt;Jinzhou.Su@amd.com&gt;
Signed-off-by: Mario Limonciello &lt;mario.limonciello@amd.com&gt;
Signed-off-by: Huang Rui &lt;ray.huang@amd.com&gt;
---
 drivers/acpi/cppc_acpi.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

<span
class="head">diff --git a/drivers/acpi/cppc_acpi.c b/drivers/acpi/cppc_acpi.c
index a4d4eebba1da..2efe2ba97d96 100644
--- a/drivers/acpi/cppc_acpi.c
+++ b/drivers/acpi/cppc_acpi.c
</span><span
class="hunk">@@ -411,7 +411,7 @@ bool acpi_cpc_valid(void)
</span> 	struct cpc_desc *cpc_ptr;
 	int cpu;

<span
class="del">-	for_each_possible_cpu(cpu) {
</span><span
class="add">+	for_each_online_cpu(cpu) {
</span> 		cpc_ptr = per_cpu(cpc_desc_ptr, cpu);
 		if (!cpc_ptr)
 			return false;
--
2.25.1

</pre></div></content></entry><entry><author><name>Huang Rui</name><email>ray.huang@amd.com</email></author><title>[PATCH v2 04/21] ACPI: CPPC: add cppc enable register function</title><updated>1970-01-01T00:00:02Z</updated><link
href="http://lore.kernel.org/lkml/20210926090605.3556134-5-ray.huang@amd.com/"/><id>urn:uuid:5fabb06b-3384-cc1b-891f-c2738c118376</id><thr:in-reply-to
ref="urn:uuid:9f37786f-4a96-95bd-37dc-29186a50f830"
href="http://lore.kernel.org/lkml/20210926090605.3556134-1-ray.huang@amd.com/"/><content
type="xhtml"><div
xmlns="http://www.w3.org/1999/xhtml"><pre
style="white-space:pre-wrap">From: Jinzhou Su &lt;Jinzhou.Su@amd.com&gt;

Add a new function to enable CPPC feature. This function
will write Continuous Performance Control package
EnableRegister field on the processor.

Signed-off-by: Jinzhou Su &lt;Jinzhou.Su@amd.com&gt;
Signed-off-by: Huang Rui &lt;ray.huang@amd.com&gt;
---
 drivers/acpi/cppc_acpi.c | 48 ++++++++++++++++++++++++++++++++++++++++
 include/acpi/cppc_acpi.h |  5 +++++
 2 files changed, 53 insertions(+)

<span
class="head">diff --git a/drivers/acpi/cppc_acpi.c b/drivers/acpi/cppc_acpi.c
index 2efe2ba97d96..b285960c35e7 100644
--- a/drivers/acpi/cppc_acpi.c
+++ b/drivers/acpi/cppc_acpi.c
</span><span
class="hunk">@@ -1220,6 +1220,54 @@ int cppc_get_perf_ctrs(int cpunum, struct cppc_perf_fb_ctrs *perf_fb_ctrs)
</span> }
 EXPORT_SYMBOL_GPL(cppc_get_perf_ctrs);

<span
class="add">+/**
+ * cppc_set_enable - Set to enable CPPC on the processor by writing the
+ * Continuous Performance Control package EnableRegister feild.
+ * @cpu: CPU for which to enable CPPC register.
+ * @enable: 0 - disable, 1 - enable CPPC feature on the processor.
+ *
+ * Return: 0 for success, -ERRNO or -EIO otherwise.
+ */
+int cppc_set_enable(int cpu, u32 enable)
+{
+	int pcc_ss_id = per_cpu(cpu_pcc_subspace_idx, cpu);
+	struct cpc_register_resource *enable_reg;
+	struct cpc_desc *cpc_desc = per_cpu(cpc_desc_ptr, cpu);
+	struct cppc_pcc_data *pcc_ss_data = NULL;
+	int ret = -1;
+
+	/* check the input value*/
+	if (cpu &lt; 0 || cpu &gt; num_possible_cpus() - 1 || enable &gt; 1)
+		return -ENODEV;
+
+	if (!cpc_desc) {
+		pr_debug(&#34;No CPC descriptor for CPU:%d\n&#34;, cpu);
+		return -ENODEV;
+	}
+
+	enable_reg = &#38;cpc_desc-&gt;cpc_regs[ENABLE];
+
+	if (CPC_IN_PCC(enable_reg)) {
+
+		if (pcc_ss_id &lt; 0)
+			return -EIO;
+
+		ret = cpc_write(cpu, enable_reg, enable);
+		if (ret)
+			return ret;
+
+		pcc_ss_data = pcc_data[pcc_ss_id];
+
+		down_write(&#38;pcc_ss_data-&gt;pcc_lock);
+		/* after writing CPC, transfer the ownership of PCC to platfrom */
+		ret = send_pcc_cmd(pcc_ss_id, CMD_WRITE);
+		up_write(&#38;pcc_ss_data-&gt;pcc_lock);
+	}
+
+	return ret;
+}
+EXPORT_SYMBOL_GPL(cppc_set_enable);
+
</span> /**
  * cppc_set_perf - Set a CPU&#39;s performance controls.
  * @cpu: CPU for which to set performance controls.
<span
class="head">diff --git a/include/acpi/cppc_acpi.h b/include/acpi/cppc_acpi.h
index 9f4985b4d64d..3fdae40a75fc 100644
--- a/include/acpi/cppc_acpi.h
+++ b/include/acpi/cppc_acpi.h
</span><span
class="hunk">@@ -137,6 +137,7 @@ struct cppc_cpudata {
</span> extern int cppc_get_desired_perf(int cpunum, u64 *desired_perf);
 extern int cppc_get_perf_ctrs(int cpu, struct cppc_perf_fb_ctrs *perf_fb_ctrs);
 extern int cppc_set_perf(int cpu, struct cppc_perf_ctrls *perf_ctrls);
<span
class="add">+extern int cppc_set_enable(int cpu, u32 enable);
</span> extern int cppc_get_perf_caps(int cpu, struct cppc_perf_caps *caps);
 extern bool acpi_cpc_valid(void);
 extern int acpi_get_psd_map(unsigned int cpu, struct cppc_cpudata *cpu_data);
<span
class="hunk">@@ -157,6 +158,10 @@ static inline int cppc_set_perf(int cpu, struct cppc_perf_ctrls *perf_ctrls)
</span> {
 	return -ENOTSUPP;
 }
<span
class="add">+static inline int cppc_set_enable(int cpu, u32 enable)
+{
+	return -ENOTSUPP;
+}
</span> static inline int cppc_get_perf_caps(int cpu, struct cppc_perf_caps *caps)
 {
 	return -ENOTSUPP;
--
2.25.1

</pre></div></content></entry><entry><author><name>Huang Rui</name><email>ray.huang@amd.com</email></author><title>[PATCH v2 05/21] cpufreq: amd: introduce a new amd pstate driver to support future processors</title><updated>1970-01-01T00:00:02Z</updated><link
href="http://lore.kernel.org/lkml/20210926090605.3556134-6-ray.huang@amd.com/"/><id>urn:uuid:496dea98-b7a3-bd5f-1c12-91673590a56e</id><thr:in-reply-to
ref="urn:uuid:9f37786f-4a96-95bd-37dc-29186a50f830"
href="http://lore.kernel.org/lkml/20210926090605.3556134-1-ray.huang@amd.com/"/><content
type="xhtml"><div
xmlns="http://www.w3.org/1999/xhtml"><pre
style="white-space:pre-wrap">amd-pstate is the AMD CPU performance scaling driver that introduces a
new CPU frequency control mechanism on AMD Zen based CPU series in Linux
kernel. The new mechanism is based on Collaborative processor
performance control (CPPC) which is finer grain frequency management
than legacy ACPI hardware P-States. Current AMD CPU platforms are using
the ACPI P-states driver to manage CPU frequency and clocks with
switching only in 3 P-states. AMD P-States is to replace the ACPI
P-states controls, allows a flexible, low-latency interface for the
Linux kernel to directly communicate the performance hints to hardware.

&#34;amd-pstate&#34; leverages the Linux kernel governors such as *schedutil*,
*ondemand*, etc. to manage the performance hints which are provided by CPPC
hardware functionality. The first version for amd-pstate is to support one
of the Zen3 processors, and we will support more in future after we verify
the hardware and SBIOS functionalities.

There are two types of hardware implementations for amd-pstate: one is full
MSR support and another is shared memory support. It can use
X86_FEATURE_AMD_CPPC_EXT feature flag to distinguish the different types.

Using the new AMD P-States method + kernel governors (*schedutil*,
*ondemand*, ...) to manage the frequency update is the most appropriate
bridge between AMD Zen based hardware processor and Linux kernel, the
processor is able to ajust to the most efficiency frequency according to
the kernel scheduler loading.

Performance Per Watt (PPW) Caculation:

The PPW caculation is referred by below paper:
<a
href="https://software.intel.com/content/dam/develop/external/us/en/documents/performance-per-what-paper.pdf">https://software.intel.com/content/dam/develop/external/us/en/documents/performance-per-what-paper.pdf</a>

Below formula is referred from below spec to measure the PPW:

(F / t) / P = F * t / (t * E) = F / E,

&#34;F&#34; is the number of frames per second.
&#34;P&#34; is power measurd in watts.
&#34;E&#34; is energy measured in joules.

We use the RAPL interface with &#34;perf&#34; tool to get the energy data of the
package power.

The data comparsions between amd-pstate and acpi-freq module are tested on
AMD Cezanne processor:

1) TBench CPU benchmark:

+---------------------------------------------------------------------+
|                                                                     |
|               TBench (Performance Per Watt)                         |
|                                                    Higher is better |
+-------------------+------------------------+------------------------+
|                   |  Performance Per Watt  |  Performance Per Watt  |
|   Kernel Module   |       (Schedutil)      |       (Ondemand)       |
|                   |  Unit: MB / (s * J)    |  Unit: MB / (s * J)    |
+-------------------+------------------------+------------------------+
|                   |                        |                        |
|    acpi-cpufreq   |         3.022          |        2.969           |
|                   |                        |                        |
+-------------------+------------------------+------------------------+
|                   |                        |                        |
|     amd-pstate    |         3.131          |        3.284           |
|                   |                        |                        |
+-------------------+------------------------+------------------------+

2) Gitsource CPU benchmark:

+---------------------------------------------------------------------+
|                                                                     |
|               Gitsource (Performance Per Watt)                      |
|                                                    Higher is better |
+-------------------+------------------------+------------------------+
|                   |  Performance Per Watt  |  Performance Per Watt  |
|   Kernel Module   |       (Schedutil)      |       (Ondemand)       |
|                   |  Unit: 1 / (s * J)     |  Unit: 1 / (s * J)     |
+-------------------+------------------------+------------------------+
|                   |                        |                        |
|    acpi-cpufreq   |     3.42172E-07        |     2.74508E-07        |
|                   |                        |                        |
+-------------------+------------------------+------------------------+
|                   |                        |                        |
|     amd-pstate    |     4.09141E-07        |     3.47610E-07        |
|                   |                        |                        |
+-------------------+------------------------+------------------------+

3) Speedometer 2.0 CPU benchmark:

+---------------------------------------------------------------------+
|                                                                     |
|               Speedometer 2.0 (Performance Per Watt)                |
|                                                    Higher is better |
+-------------------+------------------------+------------------------+
|                   |  Performance Per Watt  |  Performance Per Watt  |
|   Kernel Module   |       (Schedutil)      |       (Ondemand)       |
|                   |  Unit: 1 / (s * J)     |  Unit: 1 / (s * J)     |
+-------------------+------------------------+------------------------+
|                   |                        |                        |
|    acpi-cpufreq   |      0.116111767       |      0.110321664       |
|                   |                        |                        |
+-------------------+------------------------+------------------------+
|                   |                        |                        |
|     amd-pstate    |      0.115825281       |      0.122024299       |
|                   |                        |                        |
+-------------------+------------------------+------------------------+

According to above average data, we can see this solution has shown better
performance per watt scaling on mobile CPU benchmarks in most of cases.

Signed-off-by: Huang Rui &lt;ray.huang@amd.com&gt;
---
 drivers/cpufreq/Kconfig.x86  |  13 +
 drivers/cpufreq/Makefile     |   1 +
 drivers/cpufreq/amd-pstate.c | 446 +++++++++++++++++++++++++++++++++++
 3 files changed, 460 insertions(+)
 create mode 100644 drivers/cpufreq/amd-pstate.c

<span
class="head">diff --git a/drivers/cpufreq/Kconfig.x86 b/drivers/cpufreq/Kconfig.x86
index 92701a18bdd9..9cd7e338bdcd 100644
--- a/drivers/cpufreq/Kconfig.x86
+++ b/drivers/cpufreq/Kconfig.x86
</span><span
class="hunk">@@ -34,6 +34,19 @@ config X86_PCC_CPUFREQ
</span>
 	  If in doubt, say N.

<span
class="add">+config X86_AMD_PSTATE
+	tristate &#34;AMD Processor P-State driver&#34;
+	depends on X86
+	select ACPI_PROCESSOR if ACPI
+	select ACPI_CPPC_LIB if X86_64 &#38;&#38; ACPI &#38;&#38; SCHED_MC_PRIO
+	select CPU_FREQ_GOV_SCHEDUTIL if SMP
+	help
+	  This driver adds a CPUFreq driver which utilizes a fine grain
+	  processor performance freqency control range instead of legacy
+	  performance levels. This driver also supports newer AMD CPUs.
+
+	  If in doubt, say N.
+
</span> config X86_ACPI_CPUFREQ
 	tristate &#34;ACPI Processor P-States driver&#34;
 	depends on ACPI_PROCESSOR
<span
class="head">diff --git a/drivers/cpufreq/Makefile b/drivers/cpufreq/Makefile
index 27d3bd7ea9d4..5c9a2a1ee8dc 100644
--- a/drivers/cpufreq/Makefile
+++ b/drivers/cpufreq/Makefile
</span><span
class="hunk">@@ -25,6 +25,7 @@ obj-$(CONFIG_CPUFREQ_DT_PLATDEV)	+= cpufreq-dt-platdev.o
</span> # speedstep-* is preferred over p4-clockmod.

 obj-$(CONFIG_X86_ACPI_CPUFREQ)		+= acpi-cpufreq.o
<span
class="add">+obj-$(CONFIG_X86_AMD_PSTATE)		+= amd-pstate.o
</span> obj-$(CONFIG_X86_POWERNOW_K8)		+= powernow-k8.o
 obj-$(CONFIG_X86_PCC_CPUFREQ)		+= pcc-cpufreq.o
 obj-$(CONFIG_X86_POWERNOW_K6)		+= powernow-k6.o
<span
class="head">diff --git a/drivers/cpufreq/amd-pstate.c b/drivers/cpufreq/amd-pstate.c
new file mode 100644
index 000000000000..693d796eae55
--- /dev/null
+++ b/drivers/cpufreq/amd-pstate.c
</span><span
class="hunk">@@ -0,0 +1,446 @@
</span><span
class="add">+// SPDX-License-Identifier: GPL-2.0-or-later
+/*
+ * amd-pstate.c - AMD Processor P-state Frequency Driver
+ *
+ * Copyright (C) 2021 Advanced Micro Devices, Inc. All Rights Reserved.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ *
+ * Author: Huang Rui &lt;ray.huang@amd.com&gt;
+ */
+
+#define pr_fmt(fmt) KBUILD_MODNAME &#34;: &#34; fmt
+
+#include &lt;linux/kernel.h&gt;
+#include &lt;linux/module.h&gt;
+#include &lt;linux/init.h&gt;
+#include &lt;linux/smp.h&gt;
+#include &lt;linux/sched.h&gt;
+#include &lt;linux/cpufreq.h&gt;
+#include &lt;linux/compiler.h&gt;
+#include &lt;linux/dmi.h&gt;
+#include &lt;linux/slab.h&gt;
+#include &lt;linux/acpi.h&gt;
+#include &lt;linux/io.h&gt;
+#include &lt;linux/delay.h&gt;
+#include &lt;linux/uaccess.h&gt;
+#include &lt;linux/static_call.h&gt;
+
+#include &lt;acpi/processor.h&gt;
+#include &lt;acpi/cppc_acpi.h&gt;
+
+#include &lt;asm/msr.h&gt;
+#include &lt;asm/processor.h&gt;
+#include &lt;asm/cpufeature.h&gt;
+#include &lt;asm/cpu_device_id.h&gt;
+
+#define AMD_PSTATE_TRANSITION_LATENCY	0x20000
+#define AMD_PSTATE_TRANSITION_DELAY	500
+
+static struct cpufreq_driver amd_pstate_driver;
+
+struct amd_cpudata {
+	int	cpu;
+
+	struct freq_qos_request req[2];
+	struct cpufreq_policy *policy;
+
+	u64	cppc_req_cached;
+
+	u32	highest_perf;
+	u32	nominal_perf;
+	u32	lowest_nonlinear_perf;
+	u32	lowest_perf;
+
+	u32	max_freq;
+	u32	min_freq;
+	u32	nominal_freq;
+	u32	lowest_nonlinear_freq;
+};
+
+static inline int pstate_enable(bool enable)
+{
+	return wrmsrl_safe(MSR_AMD_CPPC_ENABLE, enable ? 1 : 0);
+}
+
+DEFINE_STATIC_CALL(amd_pstate_enable, pstate_enable);
+
+static inline int amd_pstate_enable(bool enable)
+{
+	return static_call(amd_pstate_enable)(enable);
+}
+
+static int pstate_init_perf(struct amd_cpudata *cpudata)
+{
+	u64 cap1;
+
+	int ret = rdmsrl_safe_on_cpu(cpudata-&gt;cpu, MSR_AMD_CPPC_CAP1,
+				     &#38;cap1);
+	if (ret)
+		return ret;
+
+	/*
+	 * TODO: Introduce AMD specific power feature.
+	 *
+	 * CPPC entry doesn&#39;t indicate the highest performance in some ASICs.
+	 */
+	WRITE_ONCE(cpudata-&gt;highest_perf, amd_get_highest_perf());
+
+	WRITE_ONCE(cpudata-&gt;nominal_perf, CAP1_NOMINAL_PERF(cap1));
+	WRITE_ONCE(cpudata-&gt;lowest_nonlinear_perf, CAP1_LOWNONLIN_PERF(cap1));
+	WRITE_ONCE(cpudata-&gt;lowest_perf, CAP1_LOWEST_PERF(cap1));
+
+	return 0;
+}
+
+DEFINE_STATIC_CALL(amd_pstate_init_perf, pstate_init_perf);
+
+static inline int amd_pstate_init_perf(struct amd_cpudata *cpudata)
+{
+	return static_call(amd_pstate_init_perf)(cpudata);
+}
+
+static void pstate_update_perf(struct amd_cpudata *cpudata, u32 min_perf,
+			       u32 des_perf, u32 max_perf,
+			       bool fast_switch)
+{
+	if (fast_switch)
+		wrmsrl(MSR_AMD_CPPC_REQ, READ_ONCE(cpudata-&gt;cppc_req_cached));
+	else
+		wrmsrl_on_cpu(cpudata-&gt;cpu, MSR_AMD_CPPC_REQ,
+			      READ_ONCE(cpudata-&gt;cppc_req_cached));
+}
+
+DEFINE_STATIC_CALL(amd_pstate_update_perf, pstate_update_perf);
+
+static inline void
+amd_pstate_update_perf(struct amd_cpudata *cpudata, u32 min_perf,
+		       u32 des_perf, u32 max_perf, bool fast_switch)
+{
+	static_call(amd_pstate_update_perf)(cpudata, min_perf, des_perf,
+					    max_perf, fast_switch);
+}
+
+static void
+amd_pstate_update(struct amd_cpudata *cpudata, u32 min_perf,
+		  u32 des_perf, u32 max_perf, bool fast_switch)
+{
+	u64 prev = READ_ONCE(cpudata-&gt;cppc_req_cached);
+	u64 value = prev;
+
+	value &#38;= ~REQ_MIN_PERF(~0L);
+	value |= REQ_MIN_PERF(min_perf);
+
+	value &#38;= ~REQ_DES_PERF(~0L);
+	value |= REQ_DES_PERF(des_perf);
+
+	value &#38;= ~REQ_MAX_PERF(~0L);
+	value |= REQ_MAX_PERF(max_perf);
+
+	if (value == prev)
+		return;
+
+	WRITE_ONCE(cpudata-&gt;cppc_req_cached, value);
+
+	amd_pstate_update_perf(cpudata, min_perf, des_perf,
+			       max_perf, fast_switch);
+}
+
+static int amd_pstate_verify(struct cpufreq_policy_data *policy)
+{
+	cpufreq_verify_within_cpu_limits(policy);
+
+	return 0;
+}
+
+static int amd_pstate_target(struct cpufreq_policy *policy,
+			     unsigned int target_freq,
+			     unsigned int relation)
+{
+	struct cpufreq_freqs freqs;
+	struct amd_cpudata *cpudata = policy-&gt;driver_data;
+	unsigned long amd_max_perf, amd_min_perf, amd_des_perf,
+		      amd_cap_perf;
+
+	if (!cpudata-&gt;max_freq)
+		return -ENODEV;
+
+	amd_cap_perf = READ_ONCE(cpudata-&gt;highest_perf);
+	amd_min_perf = READ_ONCE(cpudata-&gt;lowest_nonlinear_perf);
+	amd_max_perf = amd_cap_perf;
+
+	freqs.old = policy-&gt;cur;
+	freqs.new = target_freq;
+
+	amd_des_perf = DIV_ROUND_CLOSEST(target_freq * amd_cap_perf,
+					 cpudata-&gt;max_freq);
+
+	cpufreq_freq_transition_begin(policy, &#38;freqs);
+	amd_pstate_update(cpudata, amd_min_perf, amd_des_perf,
+			  amd_max_perf, false);
+	cpufreq_freq_transition_end(policy, &#38;freqs, false);
+
+	return 0;
+}
+
+static int amd_get_min_freq(struct amd_cpudata *cpudata)
+{
+	struct cppc_perf_caps cppc_perf;
+
+	int ret = cppc_get_perf_caps(cpudata-&gt;cpu, &#38;cppc_perf);
+	if (ret)
+		return ret;
+
+	/* Switch to khz */
+	return cppc_perf.lowest_freq * 1000;
+}
+
+static int amd_get_max_freq(struct amd_cpudata *cpudata)
+{
+	struct cppc_perf_caps cppc_perf;
+	u32 max_perf, max_freq, nominal_freq, nominal_perf;
+	u64 boost_ratio;
+
+	int ret = cppc_get_perf_caps(cpudata-&gt;cpu, &#38;cppc_perf);
+	if (ret)
+		return ret;
+
+	nominal_freq = cppc_perf.nominal_freq;
+	nominal_perf = READ_ONCE(cpudata-&gt;nominal_perf);
+	max_perf = READ_ONCE(cpudata-&gt;highest_perf);
+
+	boost_ratio = div_u64(max_perf &lt;&lt; SCHED_CAPACITY_SHIFT,
+			      nominal_perf);
+
+	max_freq = nominal_freq * boost_ratio &gt;&gt; SCHED_CAPACITY_SHIFT;
+
+	/* Switch to khz */
+	return max_freq * 1000;
+}
+
+static int amd_get_nominal_freq(struct amd_cpudata *cpudata)
+{
+	struct cppc_perf_caps cppc_perf;
+	u32 nominal_freq;
+
+	int ret = cppc_get_perf_caps(cpudata-&gt;cpu, &#38;cppc_perf);
+	if (ret)
+		return ret;
+
+	nominal_freq = cppc_perf.nominal_freq;
+
+	/* Switch to khz */
+	return nominal_freq * 1000;
+}
+
+static int amd_get_lowest_nonlinear_freq(struct amd_cpudata *cpudata)
+{
+	struct cppc_perf_caps cppc_perf;
+	u32 lowest_nonlinear_freq, lowest_nonlinear_perf,
+	    nominal_freq, nominal_perf;
+	u64 lowest_nonlinear_ratio;
+
+	int ret = cppc_get_perf_caps(cpudata-&gt;cpu, &#38;cppc_perf);
+	if (ret)
+		return ret;
+
+	nominal_freq = cppc_perf.nominal_freq;
+	nominal_perf = READ_ONCE(cpudata-&gt;nominal_perf);
+
+	lowest_nonlinear_perf = cppc_perf.lowest_nonlinear_perf;
+
+	lowest_nonlinear_ratio = div_u64(lowest_nonlinear_perf &lt;&lt;
+					 SCHED_CAPACITY_SHIFT, nominal_perf);
+
+	lowest_nonlinear_freq = nominal_freq * lowest_nonlinear_ratio &gt;&gt; SCHED_CAPACITY_SHIFT;
+
+	/* Switch to khz */
+	return lowest_nonlinear_freq * 1000;
+}
+
+static int amd_pstate_init_freqs_in_cpudata(struct amd_cpudata *cpudata,
+					    u32 max_freq, u32 min_freq,
+					    u32 nominal_freq,
+					    u32 lowest_nonlinear_freq)
+{
+	if (!cpudata)
+		return -EINVAL;
+
+	/* Initial processor data capability frequencies */
+	cpudata-&gt;max_freq = max_freq;
+	cpudata-&gt;min_freq = min_freq;
+	cpudata-&gt;nominal_freq = nominal_freq;
+	cpudata-&gt;lowest_nonlinear_freq = lowest_nonlinear_freq;
+
+	return 0;
+}
+
+static int amd_pstate_cpu_init(struct cpufreq_policy *policy)
+{
+	int min_freq, max_freq, nominal_freq, lowest_nonlinear_freq, ret;
+	unsigned int cpu = policy-&gt;cpu;
+	struct device *dev;
+	struct amd_cpudata *cpudata;
+
+	dev = get_cpu_device(policy-&gt;cpu);
+	if (!dev)
+		return -ENODEV;
+
+	cpudata = kzalloc(sizeof(*cpudata), GFP_KERNEL);
+	if (!cpudata)
+		return -ENOMEM;
+
+	cpudata-&gt;cpu = cpu;
+	cpudata-&gt;policy = policy;
+
+	ret = amd_pstate_init_perf(cpudata);
+	if (ret)
+		goto free_cpudata1;
+
+	min_freq = amd_get_min_freq(cpudata);
+	max_freq = amd_get_max_freq(cpudata);
+	nominal_freq = amd_get_nominal_freq(cpudata);
+	lowest_nonlinear_freq = amd_get_lowest_nonlinear_freq(cpudata);
+
+	if (min_freq &lt; 0 || max_freq &lt; 0 || min_freq &gt; max_freq) {
+		dev_err(dev, &#34;min_freq(%d) or max_freq(%d) value is incorrect\n&#34;,
+			min_freq, max_freq);
+		ret = -EINVAL;
+		goto free_cpudata1;
+	}
+
+	policy-&gt;cpuinfo.transition_latency = AMD_PSTATE_TRANSITION_LATENCY;
+	policy-&gt;transition_delay_us = AMD_PSTATE_TRANSITION_DELAY;
+
+	policy-&gt;min = min_freq;
+	policy-&gt;max = max_freq;
+
+	policy-&gt;cpuinfo.min_freq = min_freq;
+	policy-&gt;cpuinfo.max_freq = max_freq;
+
+	/* It will be updated by governor */
+	policy-&gt;cur = policy-&gt;cpuinfo.min_freq;
+
+	ret = freq_qos_add_request(&#38;policy-&gt;constraints, &#38;cpudata-&gt;req[0],
+				   FREQ_QOS_MIN, policy-&gt;cpuinfo.min_freq);
+	if (ret &lt; 0) {
+		dev_err(dev, &#34;Failed to add min-freq constraint (%d)\n&#34;, ret);
+		goto free_cpudata1;
+	}
+
+	ret = freq_qos_add_request(&#38;policy-&gt;constraints, &#38;cpudata-&gt;req[1],
+				   FREQ_QOS_MAX, policy-&gt;cpuinfo.max_freq);
+	if (ret &lt; 0) {
+		dev_err(dev, &#34;Failed to add max-freq constraint (%d)\n&#34;, ret);
+		goto free_cpudata2;
+	}
+
+	ret = amd_pstate_init_freqs_in_cpudata(cpudata, max_freq, min_freq,
+					       nominal_freq,
+					       lowest_nonlinear_freq);
+	if (ret) {
+		dev_err(dev, &#34;Failed to init cpudata (%d)\n&#34;, ret);
+		goto free_cpudata3;
+	}
+
+	policy-&gt;driver_data = cpudata;
+
+	return 0;
+
+free_cpudata3:
+	freq_qos_remove_request(&#38;cpudata-&gt;req[1]);
+free_cpudata2:
+	freq_qos_remove_request(&#38;cpudata-&gt;req[0]);
+free_cpudata1:
+	kfree(cpudata);
+	return ret;
+}
+
+static int amd_pstate_cpu_exit(struct cpufreq_policy *policy)
+{
+	struct amd_cpudata *cpudata;
+
+	cpudata = policy-&gt;driver_data;
+
+	freq_qos_remove_request(&#38;cpudata-&gt;req[1]);
+	freq_qos_remove_request(&#38;cpudata-&gt;req[0]);
+	kfree(cpudata);
+
+	return 0;
+}
+
+static struct cpufreq_driver amd_pstate_driver = {
+	.flags		= CPUFREQ_CONST_LOOPS | CPUFREQ_NEED_UPDATE_LIMITS,
+	.verify		= amd_pstate_verify,
+	.target		= amd_pstate_target,
+	.init		= amd_pstate_cpu_init,
+	.exit		= amd_pstate_cpu_exit,
+	.name		= &#34;amd-pstate&#34;,
+};
+
+static int __init amd_pstate_init(void)
+{
+	int ret;
+
+	if (boot_cpu_data.x86_vendor != X86_VENDOR_AMD)
+		return -ENODEV;
+
+	if (!acpi_cpc_valid()) {
+		pr_debug(&#34;%s, the _CPC object is not present in SBIOS\n&#34;,
+			 __func__);
+		return -ENODEV;
+	}
+
+	/* don&#39;t keep reloading if cpufreq_driver exists */
+	if (cpufreq_get_current_driver())
+		return -EEXIST;
+
+	/* capability check */
+	if (!boot_cpu_has(X86_FEATURE_AMD_CPPC)) {
+		pr_debug(&#34;%s, AMD CPPC MSR based functionality is not supported\n&#34;,
+			 __func__);
+		return -ENODEV;
+	}
+
+	/* enable amd pstate feature */
+	ret = amd_pstate_enable(true);
+	if (ret) {
+		pr_err(&#34;%s, failed to enable amd-pstate with return %d\n&#34;,
+		       __func__, ret);
+		return ret;
+	}
+
+	ret = cpufreq_register_driver(&#38;amd_pstate_driver);
+	if (ret) {
+		pr_err(&#34;%s, return %d\n&#34;, __func__, ret);
+		return ret;
+	}
+
+	return 0;
+}
+
+static void __exit amd_pstate_exit(void)
+{
+	cpufreq_unregister_driver(&#38;amd_pstate_driver);
+
+	amd_pstate_enable(false);
+}
+
+module_init(amd_pstate_init);
+module_exit(amd_pstate_exit);
+
+MODULE_AUTHOR(&#34;Huang Rui &lt;ray.huang@amd.com&gt;&#34;);
+MODULE_DESCRIPTION(&#34;AMD Processor P-state Frequency Driver&#34;);
+MODULE_LICENSE(&#34;GPL&#34;);
</span>--
2.25.1

</pre></div></content></entry><entry><author><name>Huang Rui</name><email>ray.huang@amd.com</email></author><title>[PATCH v2 06/21] cpufreq: amd: add fast switch function for amd-pstate module</title><updated>1970-01-01T00:00:02Z</updated><link
href="http://lore.kernel.org/lkml/20210926090605.3556134-7-ray.huang@amd.com/"/><id>urn:uuid:9a80fc70-785d-25a3-f448-19f9c91f0777</id><thr:in-reply-to
ref="urn:uuid:9f37786f-4a96-95bd-37dc-29186a50f830"
href="http://lore.kernel.org/lkml/20210926090605.3556134-1-ray.huang@amd.com/"/><content
type="xhtml"><div
xmlns="http://www.w3.org/1999/xhtml"><pre
style="white-space:pre-wrap">Introduce the fast switch function for amd-pstate module on the AMD
processors which support the full MSR register control. It&#39;s able to
decrease the lattency on interrupt context.

Signed-off-by: Huang Rui &lt;ray.huang@amd.com&gt;
---
 drivers/cpufreq/amd-pstate.c | 38 ++++++++++++++++++++++++++++++++++++
 1 file changed, 38 insertions(+)

<span
class="head">diff --git a/drivers/cpufreq/amd-pstate.c b/drivers/cpufreq/amd-pstate.c
index 693d796eae55..aa4610ad186e 100644
--- a/drivers/cpufreq/amd-pstate.c
+++ b/drivers/cpufreq/amd-pstate.c
</span><span
class="hunk">@@ -195,6 +195,41 @@ static int amd_pstate_target(struct cpufreq_policy *policy,
</span> 	return 0;
 }

<span
class="add">+static void amd_pstate_adjust_perf(unsigned int cpu,
+				   unsigned long min_perf,
+				   unsigned long target_perf,
+				   unsigned long capacity)
+{
+	unsigned long amd_max_perf, amd_min_perf, amd_des_perf,
+		      amd_cap_perf, lowest_nonlinear_perf;
+	struct cpufreq_policy *policy = cpufreq_cpu_get(cpu);
+	struct amd_cpudata *cpudata = policy-&gt;driver_data;
+
+	amd_cap_perf = READ_ONCE(cpudata-&gt;highest_perf);
+	lowest_nonlinear_perf = READ_ONCE(cpudata-&gt;lowest_nonlinear_perf);
+
+	if (target_perf &lt; capacity)
+		amd_des_perf = DIV_ROUND_UP(amd_cap_perf * target_perf,
+					    capacity);
+
+	amd_min_perf = READ_ONCE(cpudata-&gt;highest_perf);
+	if (min_perf &lt; capacity)
+		amd_min_perf = DIV_ROUND_UP(amd_cap_perf * min_perf, capacity);
+
+	if (amd_min_perf &lt; lowest_nonlinear_perf)
+		amd_min_perf = lowest_nonlinear_perf;
+
+	amd_max_perf = amd_cap_perf;
+	if (amd_max_perf &lt; amd_min_perf)
+		amd_max_perf = amd_min_perf;
+
+	amd_des_perf = clamp_t(unsigned long, amd_des_perf,
+			       amd_min_perf, amd_max_perf);
+
+	amd_pstate_update(cpudata, amd_min_perf, amd_des_perf,
+			  amd_max_perf, true);
+}
+
</span> static int amd_get_min_freq(struct amd_cpudata *cpudata)
 {
 	struct cppc_perf_caps cppc_perf;
<span
class="hunk">@@ -333,6 +368,8 @@ static int amd_pstate_cpu_init(struct cpufreq_policy *policy)
</span> 	/* It will be updated by governor */
 	policy-&gt;cur = policy-&gt;cpuinfo.min_freq;

<span
class="add">+	policy-&gt;fast_switch_possible = true;
+
</span> 	ret = freq_qos_add_request(&#38;policy-&gt;constraints, &#38;cpudata-&gt;req[0],
 				   FREQ_QOS_MIN, policy-&gt;cpuinfo.min_freq);
 	if (ret &lt; 0) {
<span
class="hunk">@@ -385,6 +422,7 @@ static struct cpufreq_driver amd_pstate_driver = {
</span> 	.flags		= CPUFREQ_CONST_LOOPS | CPUFREQ_NEED_UPDATE_LIMITS,
 	.verify		= amd_pstate_verify,
 	.target		= amd_pstate_target,
<span
class="add">+	.adjust_perf    = amd_pstate_adjust_perf,
</span> 	.init		= amd_pstate_cpu_init,
 	.exit		= amd_pstate_cpu_exit,
 	.name		= &#34;amd-pstate&#34;,
--
2.25.1

</pre></div></content></entry><entry><author><name>Huang Rui</name><email>ray.huang@amd.com</email></author><title>[PATCH v2 07/21] cpufreq: amd: add acpi cppc function as the backend for legacy processors</title><updated>1970-01-01T00:00:02Z</updated><link
href="http://lore.kernel.org/lkml/20210926090605.3556134-8-ray.huang@amd.com/"/><id>urn:uuid:e6749e36-a3c7-73af-fb94-2ff4dba82cae</id><thr:in-reply-to
ref="urn:uuid:9f37786f-4a96-95bd-37dc-29186a50f830"
href="http://lore.kernel.org/lkml/20210926090605.3556134-1-ray.huang@amd.com/"/><content
type="xhtml"><div
xmlns="http://www.w3.org/1999/xhtml"><pre
style="white-space:pre-wrap">In some old Zen based processors, they are using the shared memory that
exposed from ACPI SBIOS.

Signed-off-by: Jinzhou Su &lt;Jinzhou.Su@amd.com&gt;
Signed-off-by: Huang Rui &lt;ray.huang@amd.com&gt;
---
 drivers/cpufreq/amd-pstate.c | 58 ++++++++++++++++++++++++++++++++----
 1 file changed, 53 insertions(+), 5 deletions(-)

<span
class="head">diff --git a/drivers/cpufreq/amd-pstate.c b/drivers/cpufreq/amd-pstate.c
index aa4610ad186e..c9bee7b1698a 100644
--- a/drivers/cpufreq/amd-pstate.c
+++ b/drivers/cpufreq/amd-pstate.c
</span><span
class="hunk">@@ -75,6 +75,19 @@ static inline int pstate_enable(bool enable)
</span> 	return wrmsrl_safe(MSR_AMD_CPPC_ENABLE, enable ? 1 : 0);
 }

<span
class="add">+static int cppc_enable(bool enable)
+{
+	int cpu, ret = 0;
+
+	for_each_online_cpu(cpu) {
+		ret = cppc_set_enable(cpu, enable ? 1 : 0);
+		if (ret)
+			return ret;
+	}
+
+	return ret;
+}
+
</span> DEFINE_STATIC_CALL(amd_pstate_enable, pstate_enable);

 static inline int amd_pstate_enable(bool enable)
<span
class="hunk">@@ -105,6 +118,24 @@ static int pstate_init_perf(struct amd_cpudata *cpudata)
</span> 	return 0;
 }

<span
class="add">+static int cppc_init_perf(struct amd_cpudata *cpudata)
+{
+	struct cppc_perf_caps cppc_perf;
+
+	int ret = cppc_get_perf_caps(cpudata-&gt;cpu, &#38;cppc_perf);
+	if (ret)
+		return ret;
+
+	WRITE_ONCE(cpudata-&gt;highest_perf, amd_get_highest_perf());
+
+	WRITE_ONCE(cpudata-&gt;nominal_perf, cppc_perf.nominal_perf);
+	WRITE_ONCE(cpudata-&gt;lowest_nonlinear_perf,
+		   cppc_perf.lowest_nonlinear_perf);
+	WRITE_ONCE(cpudata-&gt;lowest_perf, cppc_perf.lowest_perf);
+
+	return 0;
+}
+
</span> DEFINE_STATIC_CALL(amd_pstate_init_perf, pstate_init_perf);

 static inline int amd_pstate_init_perf(struct amd_cpudata *cpudata)
<span
class="hunk">@@ -123,6 +154,19 @@ static void pstate_update_perf(struct amd_cpudata *cpudata, u32 min_perf,
</span> 			      READ_ONCE(cpudata-&gt;cppc_req_cached));
 }

<span
class="add">+static void cppc_update_perf(struct amd_cpudata *cpudata,
+			     u32 min_perf, u32 des_perf,
+			     u32 max_perf, bool fast_switch)
+{
+	struct cppc_perf_ctrls perf_ctrls;
+
+	perf_ctrls.max_perf = max_perf;
+	perf_ctrls.min_perf = min_perf;
+	perf_ctrls.desired_perf = des_perf;
+
+	cppc_set_perf(cpudata-&gt;cpu, &#38;perf_ctrls);
+}
+
</span> DEFINE_STATIC_CALL(amd_pstate_update_perf, pstate_update_perf);

 static inline void
<span
class="hunk">@@ -368,7 +412,8 @@ static int amd_pstate_cpu_init(struct cpufreq_policy *policy)
</span> 	/* It will be updated by governor */
 	policy-&gt;cur = policy-&gt;cpuinfo.min_freq;

<span
class="del">-	policy-&gt;fast_switch_possible = true;
</span><span
class="add">+	if (boot_cpu_has(X86_FEATURE_AMD_CPPC))
+		policy-&gt;fast_switch_possible = true;
</span>
 	ret = freq_qos_add_request(&#38;policy-&gt;constraints, &#38;cpudata-&gt;req[0],
 				   FREQ_QOS_MIN, policy-&gt;cpuinfo.min_freq);
<span
class="hunk">@@ -422,7 +467,6 @@ static struct cpufreq_driver amd_pstate_driver = {
</span> 	.flags		= CPUFREQ_CONST_LOOPS | CPUFREQ_NEED_UPDATE_LIMITS,
 	.verify		= amd_pstate_verify,
 	.target		= amd_pstate_target,
<span
class="del">-	.adjust_perf    = amd_pstate_adjust_perf,
</span> 	.init		= amd_pstate_cpu_init,
 	.exit		= amd_pstate_cpu_exit,
 	.name		= &#34;amd-pstate&#34;,
<span
class="hunk">@@ -446,10 +490,14 @@ static int __init amd_pstate_init(void)
</span> 		return -EEXIST;

 	/* capability check */
<span
class="del">-	if (!boot_cpu_has(X86_FEATURE_AMD_CPPC)) {
-		pr_debug(&#34;%s, AMD CPPC MSR based functionality is not supported\n&#34;,
</span><span
class="add">+	if (boot_cpu_has(X86_FEATURE_AMD_CPPC)) {
+		pr_debug(&#34;%s, AMD CPPC MSR based functionality is supported\n&#34;,
</span> 			 __func__);
<span
class="del">-		return -ENODEV;
</span><span
class="add">+		amd_pstate_driver.adjust_perf = amd_pstate_adjust_perf;
+	} else {
+		static_call_update(amd_pstate_enable, cppc_enable);
+		static_call_update(amd_pstate_init_perf, cppc_init_perf);
+		static_call_update(amd_pstate_update_perf, cppc_update_perf);
</span> 	}

 	/* enable amd pstate feature */
--
2.25.1

</pre></div></content></entry><entry><author><name>Huang Rui</name><email>ray.huang@amd.com</email></author><title>[PATCH v2 08/21] cpufreq: amd: add trace for amd-pstate module</title><updated>1970-01-01T00:00:02Z</updated><link
href="http://lore.kernel.org/lkml/20210926090605.3556134-9-ray.huang@amd.com/"/><id>urn:uuid:a408b647-dd89-f3ef-f046-c11ee59d7376</id><thr:in-reply-to
ref="urn:uuid:9f37786f-4a96-95bd-37dc-29186a50f830"
href="http://lore.kernel.org/lkml/20210926090605.3556134-1-ray.huang@amd.com/"/><content
type="xhtml"><div
xmlns="http://www.w3.org/1999/xhtml"><pre
style="white-space:pre-wrap">Add trace event to monitor the performance value changes which is
controlled by cpu governors.

Signed-off-by: Huang Rui &lt;ray.huang@amd.com&gt;
---
 drivers/cpufreq/Makefile           |  6 +-
 drivers/cpufreq/amd-pstate-trace.c |  2 +
 drivers/cpufreq/amd-pstate-trace.h | 96 ++++++++++++++++++++++++++++++
 drivers/cpufreq/amd-pstate.c       | 11 ++++
 4 files changed, 114 insertions(+), 1 deletion(-)
 create mode 100644 drivers/cpufreq/amd-pstate-trace.c
 create mode 100644 drivers/cpufreq/amd-pstate-trace.h

<span
class="head">diff --git a/drivers/cpufreq/Makefile b/drivers/cpufreq/Makefile
index 5c9a2a1ee8dc..04882bc4b145 100644
--- a/drivers/cpufreq/Makefile
+++ b/drivers/cpufreq/Makefile
</span><span
class="hunk">@@ -17,6 +17,10 @@ obj-$(CONFIG_CPU_FREQ_GOV_ATTR_SET)	+= cpufreq_governor_attr_set.o
</span> obj-$(CONFIG_CPUFREQ_DT)		+= cpufreq-dt.o
 obj-$(CONFIG_CPUFREQ_DT_PLATDEV)	+= cpufreq-dt-platdev.o

<span
class="add">+# Traces
+CFLAGS_amd-pstate-trace.o               := -I$(src)
+amd_pstate-y				:= amd-pstate.o amd-pstate-trace.o
+
</span> ##################################################################################
 # x86 drivers.
 # Link order matters. K8 is preferred to ACPI because of firmware bugs in early
<span
class="hunk">@@ -25,7 +29,7 @@ obj-$(CONFIG_CPUFREQ_DT_PLATDEV)	+= cpufreq-dt-platdev.o
</span> # speedstep-* is preferred over p4-clockmod.

 obj-$(CONFIG_X86_ACPI_CPUFREQ)		+= acpi-cpufreq.o
<span
class="del">-obj-$(CONFIG_X86_AMD_PSTATE)		+= amd-pstate.o
</span><span
class="add">+obj-$(CONFIG_X86_AMD_PSTATE)		+= amd_pstate.o
</span> obj-$(CONFIG_X86_POWERNOW_K8)		+= powernow-k8.o
 obj-$(CONFIG_X86_PCC_CPUFREQ)		+= pcc-cpufreq.o
 obj-$(CONFIG_X86_POWERNOW_K6)		+= powernow-k6.o
<span
class="head">diff --git a/drivers/cpufreq/amd-pstate-trace.c b/drivers/cpufreq/amd-pstate-trace.c
new file mode 100644
index 000000000000..891b696dcd69
--- /dev/null
+++ b/drivers/cpufreq/amd-pstate-trace.c
</span><span
class="hunk">@@ -0,0 +1,2 @@
</span><span
class="add">+#define CREATE_TRACE_POINTS
+#include &#34;amd-pstate-trace.h&#34;
</span><span
class="head">diff --git a/drivers/cpufreq/amd-pstate-trace.h b/drivers/cpufreq/amd-pstate-trace.h
new file mode 100644
index 000000000000..50c85e150f30
--- /dev/null
+++ b/drivers/cpufreq/amd-pstate-trace.h
</span><span
class="hunk">@@ -0,0 +1,96 @@
</span><span
class="add">+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * amd-pstate-trace.h - AMD Processor P-state Frequency Driver Tracer
+ *
+ * Copyright (C) 2021 Advanced Micro Devices, Inc. All Rights Reserved.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ *
+ * Author: Huang Rui &lt;ray.huang@amd.com&gt;
+ */
+
+#if !defined(_AMD_PSTATE_TRACE_H) || defined(TRACE_HEADER_MULTI_READ)
+#define _AMD_PSTATE_TRACE_H
+
+#include &lt;linux/cpufreq.h&gt;
+#include &lt;linux/tracepoint.h&gt;
+#include &lt;linux/trace_events.h&gt;
+
+#undef TRACE_SYSTEM
+#define TRACE_SYSTEM amd_cpu
+
+#undef TRACE_INCLUDE_FILE
+#define TRACE_INCLUDE_FILE amd-pstate-trace
+
+#define TPS(x)  tracepoint_string(x)
+
+TRACE_EVENT(amd_pstate_perf,
+
+	TP_PROTO(unsigned long min_perf,
+		 unsigned long target_perf,
+		 unsigned long capacity,
+		 unsigned int cpu_id,
+		 u64 prev,
+		 u64 value,
+		 int type
+		 ),
+
+	TP_ARGS(min_perf,
+		target_perf,
+		capacity,
+		cpu_id,
+		prev,
+		value,
+		type
+		),
+
+	TP_STRUCT__entry(
+		__field(unsigned long, min_perf)
+		__field(unsigned long, target_perf)
+		__field(unsigned long, capacity)
+		__field(unsigned int, cpu_id)
+		__field(u64, prev)
+		__field(u64, value)
+		__field(int, type)
+		),
+
+	TP_fast_assign(
+		__entry-&gt;min_perf = min_perf;
+		__entry-&gt;target_perf = target_perf;
+		__entry-&gt;capacity = capacity;
+		__entry-&gt;cpu_id = cpu_id;
+		__entry-&gt;prev = prev;
+		__entry-&gt;value = value;
+		__entry-&gt;type = type;
+		),
+
+	TP_printk(&#34;amd_min_perf=%lu amd_des_perf=%lu amd_max_perf=%lu cpu_id=%u prev=0x%llx value=0x%llx type=0x%d&#34;,
+		  (unsigned long)__entry-&gt;min_perf,
+		  (unsigned long)__entry-&gt;target_perf,
+		  (unsigned long)__entry-&gt;capacity,
+		  (unsigned int)__entry-&gt;cpu_id,
+		  (u64)__entry-&gt;prev,
+		  (u64)__entry-&gt;value,
+		  (int)__entry-&gt;type
+		 )
+);
+
+#endif /* _AMD_PSTATE_TRACE_H */
+
+/* This part must be outside protection */
+#undef TRACE_INCLUDE_PATH
+#define TRACE_INCLUDE_PATH .
+
+#include &lt;trace/define_trace.h&gt;
</span><span
class="head">diff --git a/drivers/cpufreq/amd-pstate.c b/drivers/cpufreq/amd-pstate.c
index c9bee7b1698a..0c9f9c0c8928 100644
--- a/drivers/cpufreq/amd-pstate.c
+++ b/drivers/cpufreq/amd-pstate.c
</span><span
class="hunk">@@ -45,10 +45,17 @@
</span> #include &lt;asm/processor.h&gt;
 #include &lt;asm/cpufeature.h&gt;
 #include &lt;asm/cpu_device_id.h&gt;
<span
class="add">+#include &#34;amd-pstate-trace.h&#34;
</span>
 #define AMD_PSTATE_TRANSITION_LATENCY	0x20000
 #define AMD_PSTATE_TRANSITION_DELAY	500

<span
class="add">+enum switch_type
+{
+	AMD_TARGET = 0,
+	AMD_ADJUST_PERF
+};
+
</span> static struct cpufreq_driver amd_pstate_driver;

 struct amd_cpudata {
<span
class="hunk">@@ -183,6 +190,7 @@ amd_pstate_update(struct amd_cpudata *cpudata, u32 min_perf,
</span> {
 	u64 prev = READ_ONCE(cpudata-&gt;cppc_req_cached);
 	u64 value = prev;
<span
class="add">+	enum switch_type type = fast_switch ? AMD_ADJUST_PERF : AMD_TARGET;
</span>
 	value &#38;= ~REQ_MIN_PERF(~0L);
 	value |= REQ_MIN_PERF(min_perf);
<span
class="hunk">@@ -193,6 +201,9 @@ amd_pstate_update(struct amd_cpudata *cpudata, u32 min_perf,
</span> 	value &#38;= ~REQ_MAX_PERF(~0L);
 	value |= REQ_MAX_PERF(max_perf);

<span
class="add">+	trace_amd_pstate_perf(min_perf, des_perf, max_perf,
+			      cpudata-&gt;cpu, prev, value, type);
+
</span> 	if (value == prev)
 		return;

--
2.25.1

</pre></div></content></entry><entry><author><name>Huang Rui</name><email>ray.huang@amd.com</email></author><title>[PATCH v2 09/21] cpufreq: amd: add boost mode support for amd-pstate</title><updated>1970-01-01T00:00:02Z</updated><link
href="http://lore.kernel.org/lkml/20210926090605.3556134-10-ray.huang@amd.com/"/><id>urn:uuid:c257d41b-ac0f-1dfa-5fdb-1d55b6e6b5fd</id><thr:in-reply-to
ref="urn:uuid:9f37786f-4a96-95bd-37dc-29186a50f830"
href="http://lore.kernel.org/lkml/20210926090605.3556134-1-ray.huang@amd.com/"/><content
type="xhtml"><div
xmlns="http://www.w3.org/1999/xhtml"><pre
style="white-space:pre-wrap">If the sbios supports the boost mode of amd-pstate, let&#39;s switch to
boost enabled by default.

Signed-off-by: Huang Rui &lt;ray.huang@amd.com&gt;
---
 drivers/cpufreq/amd-pstate.c | 44 ++++++++++++++++++++++++++++++++++++
 1 file changed, 44 insertions(+)

<span
class="head">diff --git a/drivers/cpufreq/amd-pstate.c b/drivers/cpufreq/amd-pstate.c
index 0c9f9c0c8928..847ba00e3351 100644
--- a/drivers/cpufreq/amd-pstate.c
+++ b/drivers/cpufreq/amd-pstate.c
</span><span
class="hunk">@@ -75,6 +75,8 @@ struct amd_cpudata {
</span> 	u32	min_freq;
 	u32	nominal_freq;
 	u32	lowest_nonlinear_freq;
<span
class="add">+
+	bool	boost_supported;
</span> };

 static inline int pstate_enable(bool enable)
<span
class="hunk">@@ -360,6 +362,45 @@ static int amd_get_lowest_nonlinear_freq(struct amd_cpudata *cpudata)
</span> 	return lowest_nonlinear_freq * 1000;
 }

<span
class="add">+static int amd_pstate_set_boost(struct cpufreq_policy *policy, int state)
+{
+	struct amd_cpudata *cpudata = policy-&gt;driver_data;
+	int ret;
+
+	if (!cpudata-&gt;boost_supported) {
+		pr_err(&#34;Boost mode is not supported by this processor or SBIOS\n&#34;);
+		return -EINVAL;
+	}
+
+	if (state)
+		policy-&gt;cpuinfo.max_freq = cpudata-&gt;max_freq;
+	else
+		policy-&gt;cpuinfo.max_freq = cpudata-&gt;nominal_freq;
+
+	policy-&gt;max = policy-&gt;cpuinfo.max_freq;
+
+	ret = freq_qos_update_request(&#38;cpudata-&gt;req[1],
+				      policy-&gt;cpuinfo.max_freq);
+	if (ret &lt; 0)
+		return ret;
+
+	return 0;
+}
+
+static void amd_pstate_boost_init(struct amd_cpudata *cpudata)
+{
+	u32 highest_perf, nominal_perf;
+
+	highest_perf = READ_ONCE(cpudata-&gt;highest_perf);
+	nominal_perf = READ_ONCE(cpudata-&gt;nominal_perf);
+
+	if (highest_perf &lt;= nominal_perf)
+		return;
+
+	cpudata-&gt;boost_supported = true;
+	amd_pstate_driver.boost_enabled = true;
+}
+
</span> static int amd_pstate_init_freqs_in_cpudata(struct amd_cpudata *cpudata,
 					    u32 max_freq, u32 min_freq,
 					    u32 nominal_freq,
<span
class="hunk">@@ -450,6 +491,8 @@ static int amd_pstate_cpu_init(struct cpufreq_policy *policy)
</span>
 	policy-&gt;driver_data = cpudata;

<span
class="add">+	amd_pstate_boost_init(cpudata);
+
</span> 	return 0;

 free_cpudata3:
<span
class="hunk">@@ -480,6 +523,7 @@ static struct cpufreq_driver amd_pstate_driver = {
</span> 	.target		= amd_pstate_target,
 	.init		= amd_pstate_cpu_init,
 	.exit		= amd_pstate_cpu_exit,
<span
class="add">+	.set_boost	= amd_pstate_set_boost,
</span> 	.name		= &#34;amd-pstate&#34;,
 };

--
2.25.1

</pre></div></content></entry><entry><author><name>Huang Rui</name><email>ray.huang@amd.com</email></author><title>[PATCH v2 10/21] cpufreq: amd: add amd-pstate checking support check attribute</title><updated>1970-01-01T00:00:02Z</updated><link
href="http://lore.kernel.org/lkml/20210926090605.3556134-11-ray.huang@amd.com/"/><id>urn:uuid:ad6cb8fb-3bd6-a9ff-a583-003461c8a7d6</id><thr:in-reply-to
ref="urn:uuid:9f37786f-4a96-95bd-37dc-29186a50f830"
href="http://lore.kernel.org/lkml/20210926090605.3556134-1-ray.huang@amd.com/"/><content
type="xhtml"><div
xmlns="http://www.w3.org/1999/xhtml"><pre
style="white-space:pre-wrap">The amd-pstate hardware support check will be needed by cpupower to know
whether amd-pstate is enabled and supported.

Signed-off-by: Huang Rui &lt;ray.huang@amd.com&gt;
---
 drivers/cpufreq/amd-pstate.c | 14 ++++++++++++++
 1 file changed, 14 insertions(+)

<span
class="head">diff --git a/drivers/cpufreq/amd-pstate.c b/drivers/cpufreq/amd-pstate.c
index 847ba00e3351..74f896232d5a 100644
--- a/drivers/cpufreq/amd-pstate.c
+++ b/drivers/cpufreq/amd-pstate.c
</span><span
class="hunk">@@ -517,6 +517,19 @@ static int amd_pstate_cpu_exit(struct cpufreq_policy *policy)
</span> 	return 0;
 }

<span
class="add">+static ssize_t show_is_amd_pstate_enabled(struct cpufreq_policy *policy,
+					char *buf)
+{
+	return sprintf(&#38;buf[0], &#34;%d\n&#34;, acpi_cpc_valid() ?  1 : 0);
+}
+
+cpufreq_freq_attr_ro(is_amd_pstate_enabled);
+
+static struct freq_attr *amd_pstate_attr[] = {
+	&#38;is_amd_pstate_enabled,
+	NULL,
+};
+
</span> static struct cpufreq_driver amd_pstate_driver = {
 	.flags		= CPUFREQ_CONST_LOOPS | CPUFREQ_NEED_UPDATE_LIMITS,
 	.verify		= amd_pstate_verify,
<span
class="hunk">@@ -525,6 +538,7 @@ static struct cpufreq_driver amd_pstate_driver = {
</span> 	.exit		= amd_pstate_cpu_exit,
 	.set_boost	= amd_pstate_set_boost,
 	.name		= &#34;amd-pstate&#34;,
<span
class="add">+	.attr		= amd_pstate_attr,
</span> };

 static int __init amd_pstate_init(void)
--
2.25.1

</pre></div></content></entry><entry><author><name>Huang Rui</name><email>ray.huang@amd.com</email></author><title>[PATCH v2 11/21] cpufreq: amd: add amd-pstate frequencies attributes</title><updated>1970-01-01T00:00:02Z</updated><link
href="http://lore.kernel.org/lkml/20210926090605.3556134-12-ray.huang@amd.com/"/><id>urn:uuid:18b9365c-b090-8ad0-8a2b-04b1cfaead8d</id><thr:in-reply-to
ref="urn:uuid:9f37786f-4a96-95bd-37dc-29186a50f830"
href="http://lore.kernel.org/lkml/20210926090605.3556134-1-ray.huang@amd.com/"/><content
type="xhtml"><div
xmlns="http://www.w3.org/1999/xhtml"><pre
style="white-space:pre-wrap">Introduce sysfs attributes to get the different level processor
frequencies.

Signed-off-by: Huang Rui &lt;ray.huang@amd.com&gt;
---
 drivers/cpufreq/amd-pstate.c | 71 +++++++++++++++++++++++++++++++++++-
 1 file changed, 70 insertions(+), 1 deletion(-)

<span
class="head">diff --git a/drivers/cpufreq/amd-pstate.c b/drivers/cpufreq/amd-pstate.c
index 74f896232d5a..16fed25c3400 100644
--- a/drivers/cpufreq/amd-pstate.c
+++ b/drivers/cpufreq/amd-pstate.c
</span><span
class="hunk">@@ -517,16 +517,85 @@ static int amd_pstate_cpu_exit(struct cpufreq_policy *policy)
</span> 	return 0;
 }

<span
class="del">-static ssize_t show_is_amd_pstate_enabled(struct cpufreq_policy *policy,
</span><span
class="add">+/* Sysfs attributes */
+
+static ssize_t show_amd_pstate_max_freq(struct cpufreq_policy *policy,
</span> 					char *buf)
<span
class="add">+{
+	int max_freq;
+	struct amd_cpudata *cpudata;
+
+	cpudata = policy-&gt;driver_data;
+
+	max_freq = amd_get_max_freq(cpudata);
+	if (max_freq &lt; 0)
+		return max_freq;
+
+	return sprintf(&#38;buf[0], &#34;%u\n&#34;, max_freq);
+}
+
+static ssize_t show_amd_pstate_nominal_freq(struct cpufreq_policy *policy,
+					    char *buf)
+{
+	int nominal_freq;
+	struct amd_cpudata *cpudata;
+
+	cpudata = policy-&gt;driver_data;
+
+	nominal_freq = amd_get_nominal_freq(cpudata);
+	if (nominal_freq &lt; 0)
+		return nominal_freq;
+
+	return sprintf(&#38;buf[0], &#34;%u\n&#34;, nominal_freq);
+}
+
+static ssize_t
+show_amd_pstate_lowest_nonlinear_freq(struct cpufreq_policy *policy, char *buf)
+{
+	int freq;
+	struct amd_cpudata *cpudata;
+
+	cpudata = policy-&gt;driver_data;
+
+	freq = amd_get_lowest_nonlinear_freq(cpudata);
+	if (freq &lt; 0)
+		return freq;
+
+	return sprintf(&#38;buf[0], &#34;%u\n&#34;, freq);
+}
+
+static ssize_t show_amd_pstate_min_freq(struct cpufreq_policy *policy, char *buf)
+{
+	int min_freq;
+	struct amd_cpudata *cpudata;
+
+	cpudata = policy-&gt;driver_data;
+
+	min_freq = amd_get_min_freq(cpudata);
+	if (min_freq &lt; 0)
+		return min_freq;
+
+	return sprintf(&#38;buf[0], &#34;%u\n&#34;, min_freq);
+}
+
+static ssize_t show_is_amd_pstate_enabled(struct cpufreq_policy *policy,
+					  char *buf)
</span> {
 	return sprintf(&#38;buf[0], &#34;%d\n&#34;, acpi_cpc_valid() ?  1 : 0);
 }

 cpufreq_freq_attr_ro(is_amd_pstate_enabled);
<span
class="add">+cpufreq_freq_attr_ro(amd_pstate_max_freq);
+cpufreq_freq_attr_ro(amd_pstate_nominal_freq);
+cpufreq_freq_attr_ro(amd_pstate_lowest_nonlinear_freq);
+cpufreq_freq_attr_ro(amd_pstate_min_freq);
</span>
 static struct freq_attr *amd_pstate_attr[] = {
 	&#38;is_amd_pstate_enabled,
<span
class="add">+	&#38;amd_pstate_max_freq,
+	&#38;amd_pstate_nominal_freq,
+	&#38;amd_pstate_lowest_nonlinear_freq,
+	&#38;amd_pstate_min_freq,
</span> 	NULL,
 };

--
2.25.1

</pre></div></content></entry><entry><author><name>Huang Rui</name><email>ray.huang@amd.com</email></author><title>[PATCH v2 12/21] cpufreq: amd: add amd-pstate performance attributes</title><updated>1970-01-01T00:00:02Z</updated><link
href="http://lore.kernel.org/lkml/20210926090605.3556134-13-ray.huang@amd.com/"/><id>urn:uuid:dfc0524b-2e74-4853-3c2e-0a6d281a459d</id><thr:in-reply-to
ref="urn:uuid:9f37786f-4a96-95bd-37dc-29186a50f830"
href="http://lore.kernel.org/lkml/20210926090605.3556134-1-ray.huang@amd.com/"/><content
type="xhtml"><div
xmlns="http://www.w3.org/1999/xhtml"><pre
style="white-space:pre-wrap">Introduce sysfs attributes to get the different level amd-pstate
performances.

Signed-off-by: Huang Rui &lt;ray.huang@amd.com&gt;
---
 drivers/cpufreq/amd-pstate.c | 54 ++++++++++++++++++++++++++++++++++++
 1 file changed, 54 insertions(+)

<span
class="head">diff --git a/drivers/cpufreq/amd-pstate.c b/drivers/cpufreq/amd-pstate.c
index 16fed25c3400..b0353d13f74a 100644
--- a/drivers/cpufreq/amd-pstate.c
+++ b/drivers/cpufreq/amd-pstate.c
</span><span
class="hunk">@@ -578,6 +578,50 @@ static ssize_t show_amd_pstate_min_freq(struct cpufreq_policy *policy, char *buf
</span> 	return sprintf(&#38;buf[0], &#34;%u\n&#34;, min_freq);
 }

<span
class="add">+static ssize_t
+show_amd_pstate_highest_perf(struct cpufreq_policy *policy, char *buf)
+{
+	u32 perf;
+	struct amd_cpudata *cpudata = policy-&gt;driver_data;
+
+	perf = READ_ONCE(cpudata-&gt;highest_perf);
+
+	return sprintf(&#38;buf[0], &#34;%u\n&#34;, perf);
+}
+
+static ssize_t
+show_amd_pstate_nominal_perf(struct cpufreq_policy *policy, char *buf)
+{
+	u32 perf;
+	struct amd_cpudata *cpudata = policy-&gt;driver_data;
+
+	perf = READ_ONCE(cpudata-&gt;nominal_perf);
+
+	return sprintf(&#38;buf[0], &#34;%u\n&#34;, perf);
+}
+
+static ssize_t
+show_amd_pstate_lowest_nonlinear_perf(struct cpufreq_policy *policy, char *buf)
+{
+	u32 perf;
+	struct amd_cpudata *cpudata = policy-&gt;driver_data;
+
+	perf = READ_ONCE(cpudata-&gt;lowest_nonlinear_perf);
+
+	return sprintf(&#38;buf[0], &#34;%u\n&#34;, perf);
+}
+
+static ssize_t
+show_amd_pstate_lowest_perf(struct cpufreq_policy *policy, char *buf)
+{
+	u32 perf;
+	struct amd_cpudata *cpudata = policy-&gt;driver_data;
+
+	perf = READ_ONCE(cpudata-&gt;lowest_perf);
+
+	return sprintf(&#38;buf[0], &#34;%u\n&#34;, perf);
+}
+
</span> static ssize_t show_is_amd_pstate_enabled(struct cpufreq_policy *policy,
 					  char *buf)
 {
<span
class="hunk">@@ -585,17 +629,27 @@ static ssize_t show_is_amd_pstate_enabled(struct cpufreq_policy *policy,
</span> }

 cpufreq_freq_attr_ro(is_amd_pstate_enabled);
<span
class="add">+
</span> cpufreq_freq_attr_ro(amd_pstate_max_freq);
 cpufreq_freq_attr_ro(amd_pstate_nominal_freq);
 cpufreq_freq_attr_ro(amd_pstate_lowest_nonlinear_freq);
 cpufreq_freq_attr_ro(amd_pstate_min_freq);

<span
class="add">+cpufreq_freq_attr_ro(amd_pstate_highest_perf);
+cpufreq_freq_attr_ro(amd_pstate_nominal_perf);
+cpufreq_freq_attr_ro(amd_pstate_lowest_nonlinear_perf);
+cpufreq_freq_attr_ro(amd_pstate_lowest_perf);
+
</span> static struct freq_attr *amd_pstate_attr[] = {
 	&#38;is_amd_pstate_enabled,
 	&#38;amd_pstate_max_freq,
 	&#38;amd_pstate_nominal_freq,
 	&#38;amd_pstate_lowest_nonlinear_freq,
 	&#38;amd_pstate_min_freq,
<span
class="add">+	&#38;amd_pstate_highest_perf,
+	&#38;amd_pstate_nominal_perf,
+	&#38;amd_pstate_lowest_nonlinear_perf,
+	&#38;amd_pstate_lowest_perf,
</span> 	NULL,
 };

--
2.25.1

</pre></div></content></entry><entry><author><name>Huang Rui</name><email>ray.huang@amd.com</email></author><title>[PATCH v2 13/21] cpupower: add AMD P-state capability flag</title><updated>1970-01-01T00:00:02Z</updated><link
href="http://lore.kernel.org/lkml/20210926090605.3556134-14-ray.huang@amd.com/"/><id>urn:uuid:af4e20bc-cfa3-8fa5-40de-d2676363c8e9</id><thr:in-reply-to
ref="urn:uuid:9f37786f-4a96-95bd-37dc-29186a50f830"
href="http://lore.kernel.org/lkml/20210926090605.3556134-1-ray.huang@amd.com/"/><content
type="xhtml"><div
xmlns="http://www.w3.org/1999/xhtml"><pre
style="white-space:pre-wrap">Add AMD P-state capability flag in cpupower to indicate AMD new P-state
kernel module support on Ryzen processors.

Signed-off-by: Huang Rui &lt;ray.huang@amd.com&gt;
---
 tools/power/cpupower/utils/helpers/helpers.h | 1 +
 1 file changed, 1 insertion(+)

<span
class="head">diff --git a/tools/power/cpupower/utils/helpers/helpers.h b/tools/power/cpupower/utils/helpers/helpers.h
index 33ffacee7fcb..b4813efdfb00 100644
--- a/tools/power/cpupower/utils/helpers/helpers.h
+++ b/tools/power/cpupower/utils/helpers/helpers.h
</span><span
class="hunk">@@ -73,6 +73,7 @@ enum cpupower_cpu_vendor {X86_VENDOR_UNKNOWN = 0, X86_VENDOR_INTEL,
</span> #define CPUPOWER_CAP_AMD_HW_PSTATE	0x00000100
 #define CPUPOWER_CAP_AMD_PSTATEDEF	0x00000200
 #define CPUPOWER_CAP_AMD_CPB_MSR	0x00000400
<span
class="add">+#define CPUPOWER_CAP_AMD_PSTATE		0x00000800
</span>
 #define CPUPOWER_AMD_CPBDIS		0x02000000

--
2.25.1

</pre></div></content></entry><entry><author><name>Huang Rui</name><email>ray.huang@amd.com</email></author><title>[PATCH v2 14/21] cpupower: add the function to check amd-pstate enabled</title><updated>1970-01-01T00:00:02Z</updated><link
href="http://lore.kernel.org/lkml/20210926090605.3556134-15-ray.huang@amd.com/"/><id>urn:uuid:5cbbc455-beb4-cbe2-7522-1cd9d59c2a44</id><thr:in-reply-to
ref="urn:uuid:9f37786f-4a96-95bd-37dc-29186a50f830"
href="http://lore.kernel.org/lkml/20210926090605.3556134-1-ray.huang@amd.com/"/><content
type="xhtml"><div
xmlns="http://www.w3.org/1999/xhtml"><pre
style="white-space:pre-wrap">The processor with amd-pstate function also supports legacy ACPI
hardware P-States feature as well. Once driver sets amd-pstate eanbled,
the processor will respond the finer grain amd-pstate feature instead of
legacy ACPI P-States. So it introduces the cpupower_amd_pstate_enabled()
to check whether the current kernel enables amd-pstate or acpi-cpufreq
module.

Signed-off-by: Huang Rui &lt;ray.huang@amd.com&gt;
---
 tools/power/cpupower/utils/helpers/helpers.h |  9 +++++++++
 tools/power/cpupower/utils/helpers/misc.c    | 20 ++++++++++++++++++++
 2 files changed, 29 insertions(+)

<span
class="head">diff --git a/tools/power/cpupower/utils/helpers/helpers.h b/tools/power/cpupower/utils/helpers/helpers.h
index b4813efdfb00..ae96efac759f 100644
--- a/tools/power/cpupower/utils/helpers/helpers.h
+++ b/tools/power/cpupower/utils/helpers/helpers.h
</span><span
class="hunk">@@ -136,6 +136,12 @@ extern int decode_pstates(unsigned int cpu, int boost_states,
</span>
 extern int cpufreq_has_boost_support(unsigned int cpu, int *support,
 				     int *active, int * states);
<span
class="add">+
+/* AMD P-States stuff **************************/
+extern unsigned long cpupower_amd_pstate_enabled(void);
+
+/* AMD P-States stuff **************************/
+
</span> /*
  * CPUID functions returning a single datum
  */
<span
class="hunk">@@ -168,6 +174,9 @@ static inline int cpufreq_has_boost_support(unsigned int cpu, int *support,
</span> 					    int *active, int * states)
 { return -1; }

<span
class="add">+static inline unsigned long cpupower_amd_pstate_enabled(void)
+{ return 0; }
+
</span> /* cpuid and cpuinfo helpers  **************************/

 static inline unsigned int cpuid_eax(unsigned int op) { return 0; };
<span
class="head">diff --git a/tools/power/cpupower/utils/helpers/misc.c b/tools/power/cpupower/utils/helpers/misc.c
index fc6e34511721..39ff154ea9cf 100644
--- a/tools/power/cpupower/utils/helpers/misc.c
+++ b/tools/power/cpupower/utils/helpers/misc.c
</span><span
class="hunk">@@ -83,6 +83,26 @@ int cpupower_intel_set_perf_bias(unsigned int cpu, unsigned int val)
</span> 	return 0;
 }

<span
class="add">+unsigned long cpupower_amd_pstate_enabled(void)
+{
+	char linebuf[MAX_LINE_LEN];
+	char path[SYSFS_PATH_MAX];
+	unsigned long val;
+	char *endp;
+
+	snprintf(path, sizeof(path),
+		 PATH_TO_CPU &#34;cpu0/cpufreq/is_amd_pstate_enabled&#34;);
+
+	if (cpupower_read_sysfs(path, linebuf, MAX_LINE_LEN) == 0)
+		return 0;
+
+	val = strtoul(linebuf, &#38;endp, 0);
+	if (endp == linebuf || errno == ERANGE)
+		return 0;
+
+	return val;
+}
+
</span> #endif /* #if defined(__i386__) || defined(__x86_64__) */

 /* get_cpustate
--
2.25.1

</pre></div></content></entry><entry><author><name>Huang Rui</name><email>ray.huang@amd.com</email></author><title>[PATCH v2 15/21] cpupower: initial AMD P-state capability</title><updated>1970-01-01T00:00:02Z</updated><link
href="http://lore.kernel.org/lkml/20210926090605.3556134-16-ray.huang@amd.com/"/><id>urn:uuid:38b4b349-2bb0-979d-4dd9-f358c649b8b5</id><thr:in-reply-to
ref="urn:uuid:9f37786f-4a96-95bd-37dc-29186a50f830"
href="http://lore.kernel.org/lkml/20210926090605.3556134-1-ray.huang@amd.com/"/><content
type="xhtml"><div
xmlns="http://www.w3.org/1999/xhtml"><pre
style="white-space:pre-wrap">If kernel starts the amd-pstate module, the cpupower will initial the
capability flag as CPUPOWER_CAP_AMD_PSTATE. And once amd-pstate
capability is set, it won&#39;t need to set legacy ACPI relative
capabilities anymore.

Signed-off-by: Huang Rui &lt;ray.huang@amd.com&gt;
---
 tools/power/cpupower/utils/helpers/cpuid.c | 13 +++++++++++++
 1 file changed, 13 insertions(+)

<span
class="head">diff --git a/tools/power/cpupower/utils/helpers/cpuid.c b/tools/power/cpupower/utils/helpers/cpuid.c
index 72eb43593180..2a6dc104e76b 100644
--- a/tools/power/cpupower/utils/helpers/cpuid.c
+++ b/tools/power/cpupower/utils/helpers/cpuid.c
</span><span
class="hunk">@@ -149,6 +149,19 @@ int get_cpu_info(struct cpupower_cpu_info *cpu_info)
</span> 		if (ext_cpuid_level &gt;= 0x80000008 &#38;&#38;
 		    cpuid_ebx(0x80000008) &#38; (1 &lt;&lt; 4))
 			cpu_info-&gt;caps |= CPUPOWER_CAP_AMD_RDPRU;
<span
class="add">+
+		if (cpupower_amd_pstate_enabled()) {
+			cpu_info-&gt;caps |= CPUPOWER_CAP_AMD_PSTATE;
+
+			/*
+			 * If AMD P-state is enabled, the firmware will treat
+			 * AMD P-state function as high priority.
+			 */
+			cpu_info-&gt;caps &#38;= ~CPUPOWER_CAP_AMD_CPB;
+			cpu_info-&gt;caps &#38;= ~CPUPOWER_CAP_AMD_CPB_MSR;
+			cpu_info-&gt;caps &#38;= ~CPUPOWER_CAP_AMD_HW_PSTATE;
+			cpu_info-&gt;caps &#38;= ~CPUPOWER_CAP_AMD_PSTATEDEF;
+		}
</span> 	}

 	if (cpu_info-&gt;vendor == X86_VENDOR_INTEL) {
--
2.25.1

</pre></div></content></entry><entry><author><name>Huang Rui</name><email>ray.huang@amd.com</email></author><title>[PATCH v2 16/21] cpupower: add the function to get the sysfs value from specific table</title><updated>1970-01-01T00:00:02Z</updated><link
href="http://lore.kernel.org/lkml/20210926090605.3556134-17-ray.huang@amd.com/"/><id>urn:uuid:6aa8e1d2-764d-2606-a84d-d6c245fd7bc8</id><thr:in-reply-to
ref="urn:uuid:9f37786f-4a96-95bd-37dc-29186a50f830"
href="http://lore.kernel.org/lkml/20210926090605.3556134-1-ray.huang@amd.com/"/><content
type="xhtml"><div
xmlns="http://www.w3.org/1999/xhtml"><pre
style="white-space:pre-wrap">Expose the helper into cpufreq header, then cpufreq driver can use this
function to get the sysfs value if it has any specific sysfs interfaces.

Signed-off-by: Huang Rui &lt;ray.huang@amd.com&gt;
---
 tools/power/cpupower/lib/cpufreq.c | 21 +++++++++++++++------
 tools/power/cpupower/lib/cpufreq.h | 12 ++++++++++++
 2 files changed, 27 insertions(+), 6 deletions(-)

<span
class="head">diff --git a/tools/power/cpupower/lib/cpufreq.c b/tools/power/cpupower/lib/cpufreq.c
index c3b56db8b921..02719cc400a1 100644
--- a/tools/power/cpupower/lib/cpufreq.c
+++ b/tools/power/cpupower/lib/cpufreq.c
</span><span
class="hunk">@@ -83,20 +83,21 @@ static const char *cpufreq_value_files[MAX_CPUFREQ_VALUE_READ_FILES] = {
</span> 	[STATS_NUM_TRANSITIONS] = &#34;stats/total_trans&#34;
 };

<span
class="del">-
-static unsigned long sysfs_cpufreq_get_one_value(unsigned int cpu,
-						 enum cpufreq_value which)
</span><span
class="add">+unsigned long cpufreq_get_sysfs_value_from_table(unsigned int cpu,
+						 const char **table,
+						 unsigned index,
+						 unsigned size)
</span> {
 	unsigned long value;
 	unsigned int len;
 	char linebuf[MAX_LINE_LEN];
 	char *endp;

<span
class="del">-	if (which &gt;= MAX_CPUFREQ_VALUE_READ_FILES)
</span><span
class="add">+	if (!table &#38;&#38; !table[index] &#38;&#38; index &gt;= size)
</span> 		return 0;

<span
class="del">-	len = sysfs_cpufreq_read_file(cpu, cpufreq_value_files[which],
-				linebuf, sizeof(linebuf));
</span><span
class="add">+	len = sysfs_cpufreq_read_file(cpu, table[index], linebuf,
+				      sizeof(linebuf));
</span>
 	if (len == 0)
 		return 0;
<span
class="hunk">@@ -109,6 +110,14 @@ static unsigned long sysfs_cpufreq_get_one_value(unsigned int cpu,
</span> 	return value;
 }

<span
class="add">+static unsigned long sysfs_cpufreq_get_one_value(unsigned int cpu,
+						 enum cpufreq_value which)
+{
+	return cpufreq_get_sysfs_value_from_table(cpu, cpufreq_value_files,
+						  which,
+						  MAX_CPUFREQ_VALUE_READ_FILES);
+}
+
</span> /* read access to files which contain one string */

 enum cpufreq_string {
<span
class="head">diff --git a/tools/power/cpupower/lib/cpufreq.h b/tools/power/cpupower/lib/cpufreq.h
index 95f4fd9e2656..107668c0c454 100644
--- a/tools/power/cpupower/lib/cpufreq.h
+++ b/tools/power/cpupower/lib/cpufreq.h
</span><span
class="hunk">@@ -203,6 +203,18 @@ int cpufreq_modify_policy_governor(unsigned int cpu, char *governor);
</span> int cpufreq_set_frequency(unsigned int cpu,
 				unsigned long target_frequency);

<span
class="add">+/*
+ * get the sysfs value from specific table
+ *
+ * Read the value with the sysfs file name from specific table. Does
+ * only work if the cpufreq driver has the specific sysfs interfaces.
+ */
+
+unsigned long cpufreq_get_sysfs_value_from_table(unsigned int cpu,
+						 const char **table,
+						 unsigned index,
+						 unsigned size);
+
</span> #ifdef __cplusplus
 }
 #endif
--
2.25.1

</pre></div></content></entry><entry><author><name>Huang Rui</name><email>ray.huang@amd.com</email></author><title>[PATCH v2 17/21] cpupower: add amd-pstate sysfs definition and access helper</title><updated>1970-01-01T00:00:02Z</updated><link
href="http://lore.kernel.org/lkml/20210926090605.3556134-18-ray.huang@amd.com/"/><id>urn:uuid:57b9d1e5-0abe-d6ac-7674-c9ca34a81766</id><thr:in-reply-to
ref="urn:uuid:9f37786f-4a96-95bd-37dc-29186a50f830"
href="http://lore.kernel.org/lkml/20210926090605.3556134-1-ray.huang@amd.com/"/><content
type="xhtml"><div
xmlns="http://www.w3.org/1999/xhtml"><pre
style="white-space:pre-wrap">Introduce the marco definitions and access helper function for
amd-pstate sysfs interfaces such as each performance goals and frequency
levels in amd helper file. They will be used to read the sysfs attribute
from amd-pstate cpufreq driver for cpupower utilities.

Signed-off-by: Huang Rui &lt;ray.huang@amd.com&gt;
---
 tools/power/cpupower/utils/helpers/amd.c | 39 ++++++++++++++++++++++++
 1 file changed, 39 insertions(+)

<span
class="head">diff --git a/tools/power/cpupower/utils/helpers/amd.c b/tools/power/cpupower/utils/helpers/amd.c
index 97f2c857048e..b953277215c0 100644
--- a/tools/power/cpupower/utils/helpers/amd.c
+++ b/tools/power/cpupower/utils/helpers/amd.c
</span><span
class="hunk">@@ -8,7 +8,9 @@
</span> #include &lt;pci/pci.h&gt;

 #include &#34;helpers/helpers.h&#34;
<span
class="add">+#include &#34;cpufreq.h&#34;
</span>
<span
class="add">+/* ACPI P-States Helper Functions for AMD Processors ***************/
</span> #define MSR_AMD_PSTATE_STATUS	0xc0010063
 #define MSR_AMD_PSTATE		0xc0010064
 #define MSR_AMD_PSTATE_LIMIT	0xc0010061
<span
class="hunk">@@ -146,4 +148,41 @@ int amd_pci_get_num_boost_states(int *active, int *states)
</span> 	pci_cleanup(pci_acc);
 	return 0;
 }
<span
class="add">+
+/* ACPI P-States Helper Functions for AMD Processors ***************/
+
+/* AMD P-States Helper Functions ***************/
+enum amd_pstate_value {
+	AMD_PSTATE_HIGHEST_PERF,
+	AMD_PSTATE_NOMINAL_PERF,
+	AMD_PSTATE_LOWEST_NONLINEAR_PERF,
+	AMD_PSTATE_LOWEST_PERF,
+	AMD_PSTATE_MAX_FREQ,
+	AMD_PSTATE_NOMINAL_FREQ,
+	AMD_PSTATE_LOWEST_NONLINEAR_FREQ,
+	AMD_PSTATE_MIN_FREQ,
+	MAX_AMD_PSTATE_VALUE_READ_FILES
+};
+
+static const char *amd_pstate_value_files[MAX_AMD_PSTATE_VALUE_READ_FILES] = {
+	[AMD_PSTATE_HIGHEST_PERF] = &#34;amd_pstate_highest_perf&#34;,
+	[AMD_PSTATE_NOMINAL_PERF] = &#34;amd_pstate_nominal_perf&#34;,
+	[AMD_PSTATE_LOWEST_NONLINEAR_PERF] = &#34;amd_pstate_lowest_nonlinear_perf&#34;,
+	[AMD_PSTATE_LOWEST_PERF] = &#34;amd_pstate_lowest_perf&#34;,
+	[AMD_PSTATE_MAX_FREQ] = &#34;amd_pstate_max_freq&#34;,
+	[AMD_PSTATE_NOMINAL_FREQ] = &#34;amd_pstate_nominal_freq&#34;,
+	[AMD_PSTATE_LOWEST_NONLINEAR_FREQ] = &#34;amd_pstate_lowest_nonlinear_freq&#34;,
+	[AMD_PSTATE_MIN_FREQ] = &#34;amd_pstate_min_freq&#34;
+};
+
+static unsigned long amd_pstate_get_data(unsigned int cpu,
+					 enum amd_pstate_value value)
+{
+	return cpufreq_get_sysfs_value_from_table(cpu,
+						  amd_pstate_value_files,
+						  value,
+						  MAX_AMD_PSTATE_VALUE_READ_FILES);
+}
+
+/* AMD P-States Helper Functions ***************/
</span> #endif /* defined(__i386__) || defined(__x86_64__) */
--
2.25.1

</pre></div></content></entry><entry><author><name>Huang Rui</name><email>ray.huang@amd.com</email></author><title>[PATCH v2 18/21] cpupower: enable boost state support for amd-pstate module</title><updated>1970-01-01T00:00:02Z</updated><link
href="http://lore.kernel.org/lkml/20210926090605.3556134-19-ray.huang@amd.com/"/><id>urn:uuid:022684af-17d2-ab5f-35d9-f65bd38a2eaf</id><thr:in-reply-to
ref="urn:uuid:9f37786f-4a96-95bd-37dc-29186a50f830"
href="http://lore.kernel.org/lkml/20210926090605.3556134-1-ray.huang@amd.com/"/><content
type="xhtml"><div
xmlns="http://www.w3.org/1999/xhtml"><pre
style="white-space:pre-wrap">The legacy ACPI hardware P-States function has 3 P-States on ACPI table,
the CPU frequency only can be switched between the 3 P-States. While the
processor supports the boost state, it will have another boost state
that the frequency can be higher than P0 state, and the state can be
decoded by the function of decode_pstates() and read by
amd_pci_get_num_boost_states().

However, the new AMD P-States function is different than legacy ACPI
hardware P-State on AMD processors. That has a finer grain frequency
range between the highest and lowest frequency. And boost frequency is
actually the frequency which is mapped on highest performance ratio. The
similiar previous P0 frequency is mapped on nominal performance ratio.
If the highest performance on the processor is higher than nominal
performance, then we think the current processor supports the boost
state. And it uses amd_pstate_boost_init() to initialize boost for AMD
P-States function.

Signed-off-by: Huang Rui &lt;ray.huang@amd.com&gt;
---
 tools/power/cpupower/utils/helpers/amd.c     | 18 ++++++++++++++++++
 tools/power/cpupower/utils/helpers/helpers.h |  5 +++++
 tools/power/cpupower/utils/helpers/misc.c    |  2 ++
 3 files changed, 25 insertions(+)

<span
class="head">diff --git a/tools/power/cpupower/utils/helpers/amd.c b/tools/power/cpupower/utils/helpers/amd.c
index b953277215c0..de68c14574c0 100644
--- a/tools/power/cpupower/utils/helpers/amd.c
+++ b/tools/power/cpupower/utils/helpers/amd.c
</span><span
class="hunk">@@ -184,5 +184,23 @@ static unsigned long amd_pstate_get_data(unsigned int cpu,
</span> 						  MAX_AMD_PSTATE_VALUE_READ_FILES);
 }

<span
class="add">+void amd_pstate_boost_init(unsigned int cpu, int *support, int *active)
+{
+	unsigned long highest_perf, nominal_perf, cpuinfo_min,
+		      cpuinfo_max, amd_pstate_max;
+
+	highest_perf = amd_pstate_get_data(cpu, AMD_PSTATE_HIGHEST_PERF);
+	nominal_perf = amd_pstate_get_data(cpu, AMD_PSTATE_NOMINAL_PERF);
+
+	*support = highest_perf &gt; nominal_perf ? 1 : 0;
+	if (!(*support))
+		return;
+
+	cpufreq_get_hardware_limits(cpu, &#38;cpuinfo_min, &#38;cpuinfo_max);
+	amd_pstate_max = amd_pstate_get_data(cpu, AMD_PSTATE_MAX_FREQ);
+
+	*active = cpuinfo_max == amd_pstate_max ? 1 : 0;
+}
+
</span> /* AMD P-States Helper Functions ***************/
 #endif /* defined(__i386__) || defined(__x86_64__) */
<span
class="head">diff --git a/tools/power/cpupower/utils/helpers/helpers.h b/tools/power/cpupower/utils/helpers/helpers.h
index ae96efac759f..976c142ecfa0 100644
--- a/tools/power/cpupower/utils/helpers/helpers.h
+++ b/tools/power/cpupower/utils/helpers/helpers.h
</span><span
class="hunk">@@ -139,6 +139,8 @@ extern int cpufreq_has_boost_support(unsigned int cpu, int *support,
</span>
 /* AMD P-States stuff **************************/
 extern unsigned long cpupower_amd_pstate_enabled(void);
<span
class="add">+extern void amd_pstate_boost_init(unsigned int cpu,
+				  int *support, int *active);
</span>
 /* AMD P-States stuff **************************/

<span
class="hunk">@@ -176,6 +178,9 @@ static inline int cpufreq_has_boost_support(unsigned int cpu, int *support,
</span>
 static inline unsigned long cpupower_amd_pstate_enabled(void)
 { return 0; }
<span
class="add">+static void amd_pstate_boost_init(unsigned int cpu,
+				  int *support, int *active)
+{ return; }
</span>
 /* cpuid and cpuinfo helpers  **************************/

<span
class="head">diff --git a/tools/power/cpupower/utils/helpers/misc.c b/tools/power/cpupower/utils/helpers/misc.c
index 39ff154ea9cf..99d1dc8917d0 100644
--- a/tools/power/cpupower/utils/helpers/misc.c
+++ b/tools/power/cpupower/utils/helpers/misc.c
</span><span
class="hunk">@@ -39,6 +39,8 @@ int cpufreq_has_boost_support(unsigned int cpu, int *support, int *active,
</span> 			if (ret)
 				return ret;
 		}
<span
class="add">+	} else if (cpupower_cpu_info.caps &#38; CPUPOWER_CAP_AMD_PSTATE) {
+		amd_pstate_boost_init(cpu, support, active);
</span> 	} else if (cpupower_cpu_info.caps &#38; CPUPOWER_CAP_INTEL_IDA)
 		*support = *active = 1;
 	return 0;
--
2.25.1

</pre></div></content></entry><entry><author><name>Huang Rui</name><email>ray.huang@amd.com</email></author><title>[PATCH v2 19/21] cpupower: move print_speed function into misc helper</title><updated>1970-01-01T00:00:02Z</updated><link
href="http://lore.kernel.org/lkml/20210926090605.3556134-20-ray.huang@amd.com/"/><id>urn:uuid:1d47e9b4-8756-141a-522c-136c9038eec5</id><thr:in-reply-to
ref="urn:uuid:9f37786f-4a96-95bd-37dc-29186a50f830"
href="http://lore.kernel.org/lkml/20210926090605.3556134-1-ray.huang@amd.com/"/><content
type="xhtml"><div
xmlns="http://www.w3.org/1999/xhtml"><pre
style="white-space:pre-wrap">The print_speed can be as a common function, and expose it into misc
helper header. Then it can be used on other helper files as well.

Signed-off-by: Huang Rui &lt;ray.huang@amd.com&gt;
---
 tools/power/cpupower/utils/cpufreq-info.c    | 59 ++++----------------
 tools/power/cpupower/utils/helpers/helpers.h |  1 +
 tools/power/cpupower/utils/helpers/misc.c    | 42 ++++++++++++++
 3 files changed, 54 insertions(+), 48 deletions(-)

<span
class="head">diff --git a/tools/power/cpupower/utils/cpufreq-info.c b/tools/power/cpupower/utils/cpufreq-info.c
index f9895e31ff5a..b429454bf3ae 100644
--- a/tools/power/cpupower/utils/cpufreq-info.c
+++ b/tools/power/cpupower/utils/cpufreq-info.c
</span><span
class="hunk">@@ -84,43 +84,6 @@ static void proc_cpufreq_output(void)
</span> }

 static int no_rounding;
<span
class="del">-static void print_speed(unsigned long speed)
-{
-	unsigned long tmp;
-
-	if (no_rounding) {
-		if (speed &gt; 1000000)
-			printf(&#34;%u.%06u GHz&#34;, ((unsigned int) speed/1000000),
-				((unsigned int) speed%1000000));
-		else if (speed &gt; 1000)
-			printf(&#34;%u.%03u MHz&#34;, ((unsigned int) speed/1000),
-				(unsigned int) (speed%1000));
-		else
-			printf(&#34;%lu kHz&#34;, speed);
-	} else {
-		if (speed &gt; 1000000) {
-			tmp = speed%10000;
-			if (tmp &gt;= 5000)
-				speed += 10000;
-			printf(&#34;%u.%02u GHz&#34;, ((unsigned int) speed/1000000),
-				((unsigned int) (speed%1000000)/10000));
-		} else if (speed &gt; 100000) {
-			tmp = speed%1000;
-			if (tmp &gt;= 500)
-				speed += 1000;
-			printf(&#34;%u MHz&#34;, ((unsigned int) speed/1000));
-		} else if (speed &gt; 1000) {
-			tmp = speed%100;
-			if (tmp &gt;= 50)
-				speed += 100;
-			printf(&#34;%u.%01u MHz&#34;, ((unsigned int) speed/1000),
-				((unsigned int) (speed%1000)/100));
-		}
-	}
-
-	return;
-}
-
</span> static void print_duration(unsigned long duration)
 {
 	unsigned long tmp;
<span
class="hunk">@@ -254,11 +217,11 @@ static int get_boost_mode(unsigned int cpu)
</span> 	if (freqs) {
 		printf(_(&#34;  boost frequency steps: &#34;));
 		while (freqs-&gt;next) {
<span
class="del">-			print_speed(freqs-&gt;frequency);
</span><span
class="add">+			print_speed(freqs-&gt;frequency, no_rounding);
</span> 			printf(&#34;, &#34;);
 			freqs = freqs-&gt;next;
 		}
<span
class="del">-		print_speed(freqs-&gt;frequency);
</span><span
class="add">+		print_speed(freqs-&gt;frequency, no_rounding);
</span> 		printf(&#34;\n&#34;);
 		cpufreq_put_available_frequencies(freqs);
 	}
<span
class="hunk">@@ -277,7 +240,7 @@ static int get_freq_kernel(unsigned int cpu, unsigned int human)
</span> 		return -EINVAL;
 	}
 	if (human) {
<span
class="del">-		print_speed(freq);
</span><span
class="add">+		print_speed(freq, no_rounding);
</span> 	} else
 		printf(&#34;%lu&#34;, freq);
 	printf(_(&#34; (asserted by call to kernel)\n&#34;));
<span
class="hunk">@@ -296,7 +259,7 @@ static int get_freq_hardware(unsigned int cpu, unsigned int human)
</span> 		return -EINVAL;
 	}
 	if (human) {
<span
class="del">-		print_speed(freq);
</span><span
class="add">+		print_speed(freq, no_rounding);
</span> 	} else
 		printf(&#34;%lu&#34;, freq);
 	printf(_(&#34; (asserted by call to hardware)\n&#34;));
<span
class="hunk">@@ -316,9 +279,9 @@ static int get_hardware_limits(unsigned int cpu, unsigned int human)
</span>
 	if (human) {
 		printf(_(&#34;  hardware limits: &#34;));
<span
class="del">-		print_speed(min);
</span><span
class="add">+		print_speed(min, no_rounding);
</span> 		printf(&#34; - &#34;);
<span
class="del">-		print_speed(max);
</span><span
class="add">+		print_speed(max, no_rounding);
</span> 		printf(&#34;\n&#34;);
 	} else {
 		printf(&#34;%lu %lu\n&#34;, min, max);
<span
class="hunk">@@ -350,9 +313,9 @@ static int get_policy(unsigned int cpu)
</span> 		return -EINVAL;
 	}
 	printf(_(&#34;  current policy: frequency should be within &#34;));
<span
class="del">-	print_speed(policy-&gt;min);
</span><span
class="add">+	print_speed(policy-&gt;min, no_rounding);
</span> 	printf(_(&#34; and &#34;));
<span
class="del">-	print_speed(policy-&gt;max);
</span><span
class="add">+	print_speed(policy-&gt;max, no_rounding);
</span>
 	printf(&#34;.\n                  &#34;);
 	printf(_(&#34;The governor \&#34;%s\&#34; may decide which speed to use\n&#34;
<span
class="hunk">@@ -436,7 +399,7 @@ static int get_freq_stats(unsigned int cpu, unsigned int human)
</span> 	struct cpufreq_stats *stats = cpufreq_get_stats(cpu, &#38;total_time);
 	while (stats) {
 		if (human) {
<span
class="del">-			print_speed(stats-&gt;frequency);
</span><span
class="add">+			print_speed(stats-&gt;frequency, no_rounding);
</span> 			printf(&#34;:%.2f%%&#34;,
 				(100.0 * stats-&gt;time_in_state) / total_time);
 		} else
<span
class="hunk">@@ -486,11 +449,11 @@ static void debug_output_one(unsigned int cpu)
</span> 	if (freqs) {
 		printf(_(&#34;  available frequency steps:  &#34;));
 		while (freqs-&gt;next) {
<span
class="del">-			print_speed(freqs-&gt;frequency);
</span><span
class="add">+			print_speed(freqs-&gt;frequency, no_rounding);
</span> 			printf(&#34;, &#34;);
 			freqs = freqs-&gt;next;
 		}
<span
class="del">-		print_speed(freqs-&gt;frequency);
</span><span
class="add">+		print_speed(freqs-&gt;frequency, no_rounding);
</span> 		printf(&#34;\n&#34;);
 		cpufreq_put_available_frequencies(freqs);
 	}
<span
class="head">diff --git a/tools/power/cpupower/utils/helpers/helpers.h b/tools/power/cpupower/utils/helpers/helpers.h
index 976c142ecfa0..0b0f6a55354e 100644
--- a/tools/power/cpupower/utils/helpers/helpers.h
+++ b/tools/power/cpupower/utils/helpers/helpers.h
</span><span
class="hunk">@@ -199,5 +199,6 @@ extern struct bitmask *offline_cpus;
</span> void get_cpustate(void);
 void print_online_cpus(void);
 void print_offline_cpus(void);
<span
class="add">+void print_speed(unsigned long speed, int no_rounding);
</span>
 #endif /* __CPUPOWERUTILS_HELPERS__ */
<span
class="head">diff --git a/tools/power/cpupower/utils/helpers/misc.c b/tools/power/cpupower/utils/helpers/misc.c
index 99d1dc8917d0..730f670ab90d 100644
--- a/tools/power/cpupower/utils/helpers/misc.c
+++ b/tools/power/cpupower/utils/helpers/misc.c
</span><span
class="hunk">@@ -166,3 +166,45 @@ void print_offline_cpus(void)
</span> 		printf(_(&#34;cpupower set operation was not performed on them\n&#34;));
 	}
 }
<span
class="add">+
+/*
+ * print_speed
+ *
+ * Print the exact CPU frequency with appropriate unit
+ */
+void print_speed(unsigned long speed, int no_rounding)
+{
+	unsigned long tmp;
+
+	if (no_rounding) {
+		if (speed &gt; 1000000)
+			printf(&#34;%u.%06u GHz&#34;, ((unsigned int) speed/1000000),
+				((unsigned int) speed%1000000));
+		else if (speed &gt; 1000)
+			printf(&#34;%u.%03u MHz&#34;, ((unsigned int) speed/1000),
+				(unsigned int) (speed%1000));
+		else
+			printf(&#34;%lu kHz&#34;, speed);
+	} else {
+		if (speed &gt; 1000000) {
+			tmp = speed%10000;
+			if (tmp &gt;= 5000)
+				speed += 10000;
+			printf(&#34;%u.%02u GHz&#34;, ((unsigned int) speed/1000000),
+				((unsigned int) (speed%1000000)/10000));
+		} else if (speed &gt; 100000) {
+			tmp = speed%1000;
+			if (tmp &gt;= 500)
+				speed += 1000;
+			printf(&#34;%u MHz&#34;, ((unsigned int) speed/1000));
+		} else if (speed &gt; 1000) {
+			tmp = speed%100;
+			if (tmp &gt;= 50)
+				speed += 100;
+			printf(&#34;%u.%01u MHz&#34;, ((unsigned int) speed/1000),
+				((unsigned int) (speed%1000)/100));
+		}
+	}
+
+	return;
+}
</span>--
2.25.1

</pre></div></content></entry><entry><author><name>Huang Rui</name><email>ray.huang@amd.com</email></author><title>[PATCH v2 20/21] cpupower: print amd-pstate information on cpupower</title><updated>1970-01-01T00:00:02Z</updated><link
href="http://lore.kernel.org/lkml/20210926090605.3556134-21-ray.huang@amd.com/"/><id>urn:uuid:1590ce7a-22bb-a67d-436b-b0a1f7f2b13b</id><thr:in-reply-to
ref="urn:uuid:9f37786f-4a96-95bd-37dc-29186a50f830"
href="http://lore.kernel.org/lkml/20210926090605.3556134-1-ray.huang@amd.com/"/><content
type="xhtml"><div
xmlns="http://www.w3.org/1999/xhtml"><pre
style="white-space:pre-wrap">amd-pstate kernel module is using the fine grain frequency instead of
acpi hardware pstate. So the performance and frequency values should be
printed in frequency-info.

Signed-off-by: Huang Rui &lt;ray.huang@amd.com&gt;
---
 tools/power/cpupower/utils/cpufreq-info.c    |  9 ++++---
 tools/power/cpupower/utils/helpers/amd.c     | 25 ++++++++++++++++++++
 tools/power/cpupower/utils/helpers/helpers.h |  5 ++++
 3 files changed, 36 insertions(+), 3 deletions(-)

<span
class="head">diff --git a/tools/power/cpupower/utils/cpufreq-info.c b/tools/power/cpupower/utils/cpufreq-info.c
index b429454bf3ae..f828f3c35a6f 100644
--- a/tools/power/cpupower/utils/cpufreq-info.c
+++ b/tools/power/cpupower/utils/cpufreq-info.c
</span><span
class="hunk">@@ -146,9 +146,12 @@ static int get_boost_mode_x86(unsigned int cpu)
</span> 	printf(_(&#34;    Supported: %s\n&#34;), support ? _(&#34;yes&#34;) : _(&#34;no&#34;));
 	printf(_(&#34;    Active: %s\n&#34;), active ? _(&#34;yes&#34;) : _(&#34;no&#34;));

<span
class="del">-	if ((cpupower_cpu_info.vendor == X86_VENDOR_AMD &#38;&#38;
-	     cpupower_cpu_info.family &gt;= 0x10) ||
-	     cpupower_cpu_info.vendor == X86_VENDOR_HYGON) {
</span><span
class="add">+	if (cpupower_cpu_info.vendor == X86_VENDOR_AMD &#38;&#38;
+	    cpupower_cpu_info.caps &#38; CPUPOWER_CAP_AMD_PSTATE) {
+		amd_pstate_show_perf_and_freq(cpu, no_rounding);
+	} else if ((cpupower_cpu_info.vendor == X86_VENDOR_AMD &#38;&#38;
+		    cpupower_cpu_info.family &gt;= 0x10) ||
+		   cpupower_cpu_info.vendor == X86_VENDOR_HYGON) {
</span> 		ret = decode_pstates(cpu, b_states, pstates, &#38;pstate_no);
 		if (ret)
 			return ret;
<span
class="head">diff --git a/tools/power/cpupower/utils/helpers/amd.c b/tools/power/cpupower/utils/helpers/amd.c
index de68c14574c0..d68d052ee4cb 100644
--- a/tools/power/cpupower/utils/helpers/amd.c
+++ b/tools/power/cpupower/utils/helpers/amd.c
</span><span
class="hunk">@@ -202,5 +202,30 @@ void amd_pstate_boost_init(unsigned int cpu, int *support, int *active)
</span> 	*active = cpuinfo_max == amd_pstate_max ? 1 : 0;
 }

<span
class="add">+void amd_pstate_show_perf_and_freq(unsigned int cpu, int no_rounding)
+{
+	printf(_(&#34;    AMD PSTATE Highest Performance: %lu. Maximum Frequency: &#34;),
+	       amd_pstate_get_data(cpu, AMD_PSTATE_HIGHEST_PERF));
+	print_speed(amd_pstate_get_data(cpu, AMD_PSTATE_MAX_FREQ), no_rounding);
+	printf(&#34;.\n&#34;);
+
+	printf(_(&#34;    AMD PSTATE Nominal Performance: %lu. Nominal Frequency: &#34;),
+	       amd_pstate_get_data(cpu, AMD_PSTATE_NOMINAL_PERF));
+	print_speed(amd_pstate_get_data(cpu, AMD_PSTATE_NOMINAL_FREQ),
+		    no_rounding);
+	printf(&#34;.\n&#34;);
+
+	printf(_(&#34;    AMD PSTATE Lowest Non-linear Performance: %lu. Lowest Non-linear Frequency: &#34;),
+	       amd_pstate_get_data(cpu, AMD_PSTATE_LOWEST_NONLINEAR_PERF));
+	print_speed(amd_pstate_get_data(cpu, AMD_PSTATE_LOWEST_NONLINEAR_FREQ),
+		    no_rounding);
+	printf(&#34;.\n&#34;);
+
+	printf(_(&#34;    AMD PSTATE Lowest Performance: %lu. Lowest Frequency: &#34;),
+	       amd_pstate_get_data(cpu, AMD_PSTATE_LOWEST_PERF));
+	print_speed(amd_pstate_get_data(cpu, AMD_PSTATE_MIN_FREQ), no_rounding);
+	printf(&#34;.\n&#34;);
+}
+
</span> /* AMD P-States Helper Functions ***************/
 #endif /* defined(__i386__) || defined(__x86_64__) */
<span
class="head">diff --git a/tools/power/cpupower/utils/helpers/helpers.h b/tools/power/cpupower/utils/helpers/helpers.h
index 0b0f6a55354e..80755568afc4 100644
--- a/tools/power/cpupower/utils/helpers/helpers.h
+++ b/tools/power/cpupower/utils/helpers/helpers.h
</span><span
class="hunk">@@ -141,6 +141,8 @@ extern int cpufreq_has_boost_support(unsigned int cpu, int *support,
</span> extern unsigned long cpupower_amd_pstate_enabled(void);
 extern void amd_pstate_boost_init(unsigned int cpu,
 				  int *support, int *active);
<span
class="add">+extern void amd_pstate_show_perf_and_freq(unsigned int cpu,
+					  int no_rounding);
</span>
 /* AMD P-States stuff **************************/

<span
class="hunk">@@ -181,6 +183,9 @@ static inline unsigned long cpupower_amd_pstate_enabled(void)
</span> static void amd_pstate_boost_init(unsigned int cpu,
 				  int *support, int *active)
 { return; }
<span
class="add">+static inline void amd_pstate_show_perf_and_freq(unsigned int cpu,
+						 int no_rounding)
+{ return; }
</span>
 /* cpuid and cpuinfo helpers  **************************/

--
2.25.1

</pre></div></content></entry><entry><author><name>Huang Rui</name><email>ray.huang@amd.com</email></author><title>[PATCH v2 21/21] Documentation: amd-pstate: add amd-pstate driver introduction</title><updated>1970-01-01T00:00:02Z</updated><link
href="http://lore.kernel.org/lkml/20210926090605.3556134-22-ray.huang@amd.com/"/><id>urn:uuid:4ec20451-263d-2d0b-c3ec-a908da207c65</id><thr:in-reply-to
ref="urn:uuid:9f37786f-4a96-95bd-37dc-29186a50f830"
href="http://lore.kernel.org/lkml/20210926090605.3556134-1-ray.huang@amd.com/"/><content
type="xhtml"><div
xmlns="http://www.w3.org/1999/xhtml"><pre
style="white-space:pre-wrap">Introduce the amd-pstate driver design and implementation.

Signed-off-by: Huang Rui &lt;ray.huang@amd.com&gt;
---
 Documentation/admin-guide/pm/amd_pstate.rst   | 377 ++++++++++++++++++
 .../admin-guide/pm/working-state.rst          |   1 +
 2 files changed, 378 insertions(+)
 create mode 100644 Documentation/admin-guide/pm/amd_pstate.rst

<span
class="head">diff --git a/Documentation/admin-guide/pm/amd_pstate.rst b/Documentation/admin-guide/pm/amd_pstate.rst
new file mode 100644
index 000000000000..c3659dde0cee
--- /dev/null
+++ b/Documentation/admin-guide/pm/amd_pstate.rst
</span><span
class="hunk">@@ -0,0 +1,377 @@
</span><span
class="add">+.. SPDX-License-Identifier: GPL-2.0
+.. include:: &lt;isonum.txt&gt;
+
+===============================================
+``amd-pstate`` CPU Performance Scaling Driver
+===============================================
+
+:Copyright: |copy| 2021 Advanced Micro Devices, Inc.
+
+:Author: Huang Rui &lt;ray.huang@amd.com&gt;
+
+
+Introduction
+===================
+
+``amd-pstate`` is the AMD CPU performance scaling driver that introduces a
+new CPU frequency control mechanism on modern AMD APU and CPU series in
+Linux kernel. The new mechanism is based on Collaborative Processor
+Performance Control (CPPC) which provides finer grain frequency management
+than legacy ACPI hardware P-States. Current AMD CPU/APU platforms are using
+the ACPI P-states driver to manage CPU frequency and clocks with switching
+only in 3 P-states. CPPC replaces the ACPI P-states controls, allows a
+flexible, low-latency interface for the Linux kernel to directly
+communicate the performance hints to hardware.
+
+``amd-pstate`` leverages the Linux kernel governors such as ``schedutil``,
+``ondemand``, etc. to manage the performance hints which are provided by
+CPPC hardware functionality that internally follows the hardware
+specification (for details refer to AMD64 Architecture Programmer&#39;s Manual
+Volume 2: System Programming [1]_). Currently ``amd-pstate`` supports basic
+frequency control function according to kernel governors on some of the
+Zen2 and Zen3 processors, and we will implement more AMD specific functions
+in future after we verify them on the hardware and SBIOS.
+
+
+AMD CPPC Overview
+=======================
+
+Collaborative Processor Performance Control (CPPC) interface enumerates a
+continuous, abstract, and unit-less performance value in a scale that is
+not tied to a specific performance state / frequency. This is an ACPI
+standard [2]_ which software can specify application performance goals and
+hints as a relative target to the infrastructure limits. AMD processors
+provides the low latency register model (MSR) instead of AML code
+interpreter for performance adjustments. ``amd-pstate`` will initialize a
+``struct cpufreq_driver`` instance ``amd_pstate_driver`` with the callbacks
+to manage each performance update behavior. ::
+
+ Highest Perf ------&gt;+-----------------------+                         +-----------------------+
+                     |                       |                         |                       |
+                     |                       |                         |                       |
+                     |                       |          Max Perf  ----&gt;|                       |
+                     |                       |                         |                       |
+                     |                       |                         |                       |
+ Nominal Perf ------&gt;+-----------------------+                         +-----------------------+
+                     |                       |                         |                       |
+                     |                       |                         |                       |
+                     |                       |                         |                       |
+                     |                       |                         |                       |
+                     |                       |                         |                       |
+                     |                       |                         |                       |
+                     |                       |      Desired Perf  ----&gt;|                       |
+                     |                       |                         |                       |
+                     |                       |                         |                       |
+                     |                       |                         |                       |
+                     |                       |                         |                       |
+                     |                       |                         |                       |
+                     |                       |                         |                       |
+                     |                       |                         |                       |
+                     |                       |                         |                       |
+                     |                       |                         |                       |
+  Lowest non-        |                       |                         |                       |
+  linear perf ------&gt;+-----------------------+                         +-----------------------+
+                     |                       |                         |                       |
+                     |                       |       Lowest perf  ----&gt;|                       |
+                     |                       |                         |                       |
+  Lowest perf ------&gt;+-----------------------+                         +-----------------------+
+                     |                       |                         |                       |
+                     |                       |                         |                       |
+                     |                       |                         |                       |
+          0   ------&gt;+-----------------------+                         +-----------------------+
+
+                                     AMD P-States Performance Scale
+
+
+.. _perf_cap:
+
+AMD CPPC Performance Capability
+--------------------------------
+
+Highest Performance (RO)
+.........................
+
+It is the absolute maximum performance an individual processor may reach,
+assuming ideal conditions. This performance level may not be sustainable
+for long durations and may only be achievable if other platform components
+are in a specific state; for example, it may require other processors be in
+an idle state. This would be equivalent to the highest frequencies
+supported by the processor.
+
+Nominal (Guaranteed) Performance (RO)
+......................................
+
+It is the maximum sustained performance level of the processor, assuming
+ideal operating conditions. In absence of an external constraint (power,
+thermal, etc.) this is the performance level the processor is expected to
+be able to maintain continuously. All cores/processors are expected to be
+able to sustain their nominal performance state simultaneously.
+
+Lowest non-linear Performance (RO)
+...................................
+
+It is the lowest performance level at which nonlinear power savings are
+achieved, for example, due to the combined effects of voltage and frequency
+scaling. Above this threshold, lower performance levels should be generally
+more energy efficient than higher performance levels. This register
+effectively conveys the most efficient performance level to ``amd-pstate``.
+
+Lowest Performance (RO)
+........................
+
+It is the absolute lowest performance level of the processor. Selecting a
+performance level lower than the lowest nonlinear performance level may
+cause an efficiency penalty but should reduce the instantaneous power
+consumption of the processor.
+
+AMD CPPC Performance Control
+------------------------------
+
+``amd-pstate`` passes performance goals through these registers. The
+register drives the behavior of the desired performance target.
+
+Minimum requested performance (RW)
+...................................
+
+``amd-pstate`` specifies the minimum allowed performance level.
+
+Maximum requested performance (RW)
+...................................
+
+``amd-pstate`` specifies a limit the maximum performance that is expected
+to be supplied by the hardware.
+
+Desired performance target (RW)
+...................................
+
+``amd-pstate`` specifies a desired target in the CPPC performance scale as
+a relative number. This can be expressed as percentage of nominal
+performance (infrastructure max). Below the nominal sustained performance
+level, desired performance expresses the average performance level of the
+processor subject to hardware. Above the nominal performance level,
+processor must provide at least nominal performance requested and go higher
+if current operating conditions allow.
+
+Energy Performance Preference (EPP) (RW)
+.........................................
+
+Provides a hint to the hardware if software wants to bias toward performance
+(0x0) or energy efficiency (0xff).
+
+
+Key Governors Support
+=======================
+
+``amd-pstate`` can be used with all the (generic) scaling governors listed
+by the ``scaling_available_governors`` policy attribute in ``sysfs``. Then,
+it is responsible for the configuration of policy objects corresponding to
+CPUs and provides the ``CPUFreq`` core (and the scaling governors attached
+to the policy objects) with accurate information on the maximum and minimum
+operating frequencies supported by the hardware. Users can check the
+``scaling_cur_freq`` information comes from the ``CPUFreq`` core.
+
+``amd-pstate`` mainly supports ``schedutil`` and ``ondemand`` for dynamic
+frequency control. It is to fine tune the processor configuration on
+``amd-pstate`` to the ``schedutil`` with CPU CFS scheduler. ``amd-pstate``
+registers adjust_perf callback to implement the CPPC similar performance
+update behavior. It is initialized by ``sugov_start`` and then populate the
+CPU&#39;s update_util_data pointer to assign ``sugov_update_single_perf`` as
+the utilization update callback function in CPU scheduler. CPU scheduler
+will call ``cpufreq_update_util`` and assign the target performance
+according to the ``struct sugov_cpu`` that utilization update belongs to.
+Then ``amd-pstate`` updates the desired performance according to the CPU
+scheduler assigned.
+
+
+Processor Support
+=======================
+
+The ``amd-pstate`` initialization will fail if the _CPC in ACPI SBIOS is
+not existed at the detected processor, and it uses ``acpi_cpc_valid`` to
+check the _CPC existence. All Zen based processors support legacy ACPI
+hardware P-States function, so while the ``amd-pstate`` fails to be
+initialized, the kernel will fall back to initialize ``acpi-cpufreq``
+driver.
+
+There are two types of hardware implementations for ``amd-pstate``: one is
+`Full MSR Support &lt;perf_cap_&gt;`_ and another is `Shared Memory Support
+&lt;perf_cap_&gt;`_. It can use :c:macro:`X86_FEATURE_AMD_CPPC_EXT` feature flag
+(for details refer to Processor Programming Reference (PPR) for AMD Family
+19h Model 21h, Revision B0 Processors [3]_) to indicate the different
+types. ``amd-pstate`` is to register different ``amd_pstate_perf_funcs``
+instances for different hardware implementations.
+
+Currently, some of Zen2 and Zen3 processors support ``amd-pstate``. In the
+future, it will be supported on more and more AMD processors.
+
+Full MSR Support
+-----------------
+
+Some new Zen3 processors such as Cezanne provide the MSR registers directly
+while the :c:macro:`X86_FEATURE_AMD_CPPC_EXT` CPU feature flag is set.
+``amd-pstate`` can handle the MSR register to implement the fast switch
+function in ``CPUFreq`` that can shrink latency of frequency control on the
+interrupt context.
+
+Shared Memory Support
+----------------------
+
+If :c:macro:`X86_FEATURE_AMD_CPPC_EXT` CPU feature flag is not set, that
+means the processor supports shared memory solution. In this case,
+``amd-pstate`` uses the ``cppc_acpi`` helper methods to implement the
+callback functions of ``amd_pstate_perf_funcs``.
+
+
+AMD P-States and ACPI hardware P-States always can be supported in one
+processor. But AMD P-States has the higher priority and if it is enabled
+with :c:macro:`MSR_AMD_CPPC_ENABLE` or ``cppc_set_enable``, it will respond
+to the request from AMD P-States.
+
+
+User Space Interface in ``sysfs``
+==================================
+
+``amd-pstate`` exposes several global attributes (files) in ``sysfs`` to
+control its functionality at the system level. They located in the
+``/sys/devices/system/cpu/cpufreq/policyX/`` directory and affect all CPUs. ::
+
+ root@hr-test1:/home/ray# ls /sys/devices/system/cpu/cpufreq/policy0/*amd*
+ /sys/devices/system/cpu/cpufreq/policy0/amd_pstate_highest_perf
+ /sys/devices/system/cpu/cpufreq/policy0/amd_pstate_lowest_nonlinear_freq
+ /sys/devices/system/cpu/cpufreq/policy0/amd_pstate_lowest_nonlinear_perf
+ /sys/devices/system/cpu/cpufreq/policy0/amd_pstate_lowest_perf
+ /sys/devices/system/cpu/cpufreq/policy0/amd_pstate_max_freq
+ /sys/devices/system/cpu/cpufreq/policy0/amd_pstate_min_freq
+ /sys/devices/system/cpu/cpufreq/policy0/amd_pstate_nominal_freq
+ /sys/devices/system/cpu/cpufreq/policy0/amd_pstate_nominal_perf
+ /sys/devices/system/cpu/cpufreq/policy0/is_amd_pstate_enabled
+
+
+``is_amd_pstate_enabled``
+
+Query whether current kernel loads ``amd-pstate`` to enable the AMD
+P-States functionality.
+This attribute is read-only.
+
+``amd_pstate_highest_perf / amd_pstate_max_freq``
+
+Maximum CPPC performance and CPU frequency that the driver is allowed to
+set in percent of the maximum supported CPPC performance level (the highest
+performance supported in `AMD CPPC Performance Capability &lt;perf_cap_&gt;`_).
+This attribute is read-only.
+
+``amd_pstate_nominal_perf / amd_pstate_nominal_freq``
+
+Nominal CPPC performance and CPU frequency that the driver is allowed to
+set in percent of the maximum supported CPPC performance level (Please see
+nominal performance in `AMD CPPC Performance Capability &lt;perf_cap_&gt;`_).
+This attribute is read-only.
+
+``amd_pstate_lowest_nonlinear_perf / amd_pstate_lowest_nonlinear_freq``
+
+The lowest non-linear CPPC performance and CPU frequency that the driver is
+allowed to set in percent of the maximum supported CPPC performance level
+(Please see the lowest non-linear performance in `AMD CPPC Performance
+Capability &lt;perf_cap_&gt;`_).
+This attribute is read-only.
+
+``amd_pstate_lowest_perf / amd_pstate_min_freq``
+
+The lowest physical CPPC performance and CPU frequency.
+This attribute is read-only.
+
+
+``amd-pstate`` vs ``acpi-cpufreq``
+======================================
+
+On majority of AMD platforms supported by ``acpi-cpufreq``, the ACPI tables
+provided by the platform firmware used for CPU performance scaling, but
+only provides 3 P-states on AMD processors.
+However, on modern AMD APU and CPU series, it provides the collaborative
+processor performance control according to ACPI protocol and customize this
+for AMD platforms. That is fine-grain and continuous frequency range
+instead of the legacy hardware P-states. ``amd-pstate`` is the kernel
+module which supports the new AMD P-States mechanism on most of future AMD
+platforms. The AMD P-States mechanism will be the more performance and energy
+efficiency frequency management method on AMD processors.
+
+``cpupower`` tool support for ``amd-pstate``
+===============================================
+
+``amd-pstate`` is supported on ``cpupower`` tool that can be used to dump the frequency
+information. And it is in progress to support more and more operations for new
+``amd-pstate`` module with this tool. ::
+
+ root@hr-test1:/home/ray# cpupower frequency-info
+ analyzing CPU 0:
+   driver: amd-pstate
+   CPUs which run at the same hardware frequency: 0
+   CPUs which need to have their frequency coordinated by software: 0
+   maximum transition latency: 131 us
+   hardware limits: 400 MHz - 4.68 GHz
+   available cpufreq governors: ondemand conservative powersave userspace performance schedutil
+   current policy: frequency should be within 400 MHz and 4.68 GHz.
+                   The governor &#34;schedutil&#34; may decide which speed to use
+                   within this range.
+   current CPU frequency: Unable to call hardware
+   current CPU frequency: 4.02 GHz (asserted by call to kernel)
+   boost state support:
+     Supported: yes
+     Active: yes
+     AMD PSTATE Highest Performance: 166. Maximum Frequency: 4.68 GHz.
+     AMD PSTATE Nominal Performance: 117. Nominal Frequency: 3.30 GHz.
+     AMD PSTATE Lowest Non-linear Performance: 39. Lowest Non-linear Frequency: 1.10 GHz.
+     AMD PSTATE Lowest Performance: 15. Lowest Frequency: 400 MHz.
+
+
+Diagnostics and Tuning
+=======================
+
+Trace Events
+--------------
+
+There are two static trace events that can be used for ``amd-pstate``
+diagnostics.  One of them is the cpu_frequency trace event generally used
+by ``CPUFreq``, and the other one is the ``amd_pstate_perf`` trace event
+specific to ``amd-pstate``.  The following sequence of shell commands can
+be used to enable them and see their output (if the kernel is generally
+configured to support event tracing). ::
+
+ root@hr-test1:/home/ray# cd /sys/kernel/tracing/
+ root@hr-test1:/sys/kernel/tracing# echo 1 &gt; events/amd_cpu/enable
+ root@hr-test1:/sys/kernel/tracing# cat trace
+ # tracer: nop
+ #
+ # entries-in-buffer/entries-written: 47827/42233061   #P:2
+ #
+ #                                _-----=&gt; irqs-off
+ #                               / _----=&gt; need-resched
+ #                              | / _---=&gt; hardirq/softirq
+ #                              || / _--=&gt; preempt-depth
+ #                              ||| /     delay
+ #           TASK-PID     CPU#  ||||   TIMESTAMP  FUNCTION
+ #              | |         |   ||||      |         |
+           &lt;idle&gt;-0       [000] d.s. 244057.464842: amd_pstate_perf: amd_min_perf=39 amd_des_perf=39 amd_max_perf=166 cpu_id=0 prev=0x2727a6 value=0x2727a6
+           &lt;idle&gt;-0       [000] d.h. 244057.475436: amd_pstate_perf: amd_min_perf=39 amd_des_perf=39 amd_max_perf=166 cpu_id=0 prev=0x2727a6 value=0x2727a6
+           &lt;idle&gt;-0       [000] d.h. 244057.476629: amd_pstate_perf: amd_min_perf=39 amd_des_perf=39 amd_max_perf=166 cpu_id=0 prev=0x2727a6 value=0x2727a6
+           &lt;idle&gt;-0       [000] d.s. 244057.484847: amd_pstate_perf: amd_min_perf=39 amd_des_perf=39 amd_max_perf=166 cpu_id=0 prev=0x2727a6 value=0x2727a6
+           &lt;idle&gt;-0       [000] d.h. 244057.499821: amd_pstate_perf: amd_min_perf=39 amd_des_perf=39 amd_max_perf=166 cpu_id=0 prev=0x2727a6 value=0x2727a6
+     avahi-daemon-528     [000] d... 244057.513568: amd_pstate_perf: amd_min_perf=39 amd_des_perf=39 amd_max_perf=166 cpu_id=0 prev=0x2727a6 value=0x2727a6
+
+The cpu_frequency trace event will be triggered either by the ``schedutil`` scaling
+governor (for the policies it is attached to), or by the ``CPUFreq`` core (for the
+policies with other scaling governors).
+
+
+Reference
+===========
+
+.. [1] AMD64 Architecture Programmer&#39;s Manual Volume 2: System Programming,
+       <a
href="https://www.amd.com/system/files/TechDocs/24593.pdf">https://www.amd.com/system/files/TechDocs/24593.pdf</a>
+
+.. [2] Advanced Configuration and Power Interface Specification,
+       <a
href="https://uefi.org/sites/default/files/resources/ACPI_Spec_6_4_Jan22.pdf">https://uefi.org/sites/default/files/resources/ACPI_Spec_6_4_Jan22.pdf</a>
+
+.. [3] Processor Programming Reference (PPR) for AMD Family 19h Model 21h, Revision B0 Processors
+       <a
href="https://www.amd.com/system/files/TechDocs/55898_B1_pub_0.50.zip">https://www.amd.com/system/files/TechDocs/55898_B1_pub_0.50.zip</a>
+
</span><span
class="head">diff --git a/Documentation/admin-guide/pm/working-state.rst b/Documentation/admin-guide/pm/working-state.rst
index f40994c422dc..28db6156b55d 100644
--- a/Documentation/admin-guide/pm/working-state.rst
+++ b/Documentation/admin-guide/pm/working-state.rst
</span><span
class="hunk">@@ -11,6 +11,7 @@ Working-State Power Management
</span>    intel_idle
    cpufreq
    intel_pstate
<span
class="add">+   amd_pstate
</span>    cpufreq_drivers
    intel_epb
    intel-speed-select
--
2.25.1

</pre></div></content></entry></feed>
